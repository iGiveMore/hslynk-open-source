package com.servinglynk.hmis.warehouse.dao;

import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.servinglynk.hmis.warehouse.base.util.ErrorType;
import com.servinglynk.hmis.warehouse.domain.ExportDomain;
import com.servinglynk.hmis.warehouse.domain.Sources.Source.Export;
import com.servinglynk.hmis.warehouse.domain.Sources.Source.Export.CommercialSexualExploitation;
import com.servinglynk.hmis.warehouse.enums.CommercialsexualexploitationAskedorforcedtoexchangeforsexEnum;
import com.servinglynk.hmis.warehouse.enums.CommercialsexualexploitationCountofexchangeforsexEnum;
import com.servinglynk.hmis.warehouse.enums.CommercialsexualexploitationExchangeforsexpastthreemonthsEnum;
import com.servinglynk.hmis.warehouse.enums.DataCollectionStageEnum;
import com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation;
import com.servinglynk.hmis.warehouse.model.v2014.Error2014;
import com.servinglynk.hmis.warehouse.model.v2014.HmisBaseModel;
import com.servinglynk.hmis.warehouse.util.BasicDataGenerator;

public class CommercialsexualexploitationDaoImpl  extends ParentDaoImpl  implements CommercialsexualexploitationDao {
	
	private static final Logger logger = LoggerFactory
			.getLogger(CommercialsexualexploitationDaoImpl.class);
	
	@Override
	
	public void hydrateStaging(ExportDomain domain , Map<String,HmisBaseModel> exportModelMap, Map<String,HmisBaseModel> relatedModelMap) throws Exception 
	{
		Export export = domain.getExport();
		List<CommercialSexualExploitation> commercialSexualExploitations = export.getCommercialSexualExploitation();
		Data data =new Data();
		Map<String,HmisBaseModel> modelMap = getModelMap(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class, getProjectGroupCode(domain));
		com.servinglynk.hmis.warehouse.model.v2014.Export exportEntity = (com.servinglynk.hmis.warehouse.model.v2014.Export) getModel(Commercialsexualexploitation.class.getSimpleName(),com.servinglynk.hmis.warehouse.model.v2014.Export.class,String.valueOf(domain.getExport().getExportID()),getProjectGroupCode(domain),false,exportModelMap, domain.getUpload().getId());
		if(commercialSexualExploitations!=null && !commercialSexualExploitations.isEmpty())
		{
			for(CommercialSexualExploitation e : commercialSexualExploitations) {
				processData(e, domain, data, modelMap, relatedModelMap, exportEntity);
			}
		}
		hydrateBulkUploadActivityStaging(data.i,data.j,data.ignore, Commercialsexualexploitation.class.getSimpleName(), domain, exportEntity);
	}
	
	public void processData(CommercialSexualExploitation commercialSexualExploitation,ExportDomain domain,Data data,Map<String,HmisBaseModel> modelMap,Map<String,HmisBaseModel> relatedModelMap,com.servinglynk.hmis.warehouse.model.v2014.Export exportEntity) {
			Commercialsexualexploitation model = null;
			try {
				// We always insert for a Full refresh and update if the record exists for Delta refresh
				model = getModelObject(domain,commercialSexualExploitation,data,modelMap);
				model.setAskedorforcedtoexchangeforsex(CommercialsexualexploitationAskedorforcedtoexchangeforsexEnum.lookupEnum(BasicDataGenerator.getStringValue(commercialSexualExploitation.getAskedOrForcedToExchangeForSex())));
				model.setCountofexchangeforsex(CommercialsexualexploitationCountofexchangeforsexEnum.lookupEnum(BasicDataGenerator.getStringValue(commercialSexualExploitation.getCountOfExchangeForSex())));
				model.setExchangeforsexpastthreemonths(CommercialsexualexploitationExchangeforsexpastthreemonthsEnum.lookupEnum(BasicDataGenerator.getStringValue(commercialSexualExploitation.getExchangeForSexPastThreeMonths())));
				model.setExport(exportEntity);
				com.servinglynk.hmis.warehouse.model.v2014.Enrollment enrollmentModel = (com.servinglynk.hmis.warehouse.model.v2014.Enrollment) getModel(Commercialsexualexploitation.class.getSimpleName(),com.servinglynk.hmis.warehouse.model.v2014.Enrollment.class,String.valueOf(commercialSexualExploitation.getProjectEntryID()),getProjectGroupCode(domain),false,relatedModelMap, domain.getUpload().getId());
				model.setEnrollmentid(enrollmentModel);
				model.setDataCollectionStage(DataCollectionStageEnum.lookupEnum(BasicDataGenerator.getStringValue(commercialSexualExploitation.getDataCollectionStage())));
				model.setDateCreatedFromSource(BasicDataGenerator.getLocalDateTime(commercialSexualExploitation.getDateCreated()));
				model.setDateUpdatedFromSource(BasicDataGenerator.getLocalDateTime(commercialSexualExploitation.getDateUpdated()));
				
				performSaveOrUpdate(model);
			} catch(Exception e) {
				String errorMessage = "Exception in:"+commercialSexualExploitation.getProjectEntryID()+  ":: Exception" +e.getLocalizedMessage();
				if (model != null) {
					Error2014 error = new Error2014();
					error.model_id = model.getId();
					error.bulk_upload_ui = domain.getUpload().getId();
					error.project_group_code = domain.getUpload().getProjectGroupCode();
					error.source_system_id = model.getSourceSystemId();
					error.type = ErrorType.ERROR;
					error.error_description = errorMessage;
					error.date_created = model.getDateCreated();
					performSave(error);
				}
				logger.error(errorMessage);
			}
	 }
	  public com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation getModelObject(ExportDomain domain, CommercialSexualExploitation commercialSexualExploitation,Data data, Map<String,HmisBaseModel> modelMap) {
		  com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation modelFromDB = null;
		  if(!isFullRefresh(domain))
			  modelFromDB = (com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation) getModel(Commercialsexualexploitation.class.getSimpleName(),com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class, commercialSexualExploitation.getCommercialSexualExploitationID(), getProjectGroupCode(domain),false,modelMap, domain.getUpload().getId());
		
		  if(modelFromDB == null) {
			modelFromDB = new com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation();
			modelFromDB.setId(UUID.randomUUID());
			modelFromDB.setRecordToBeInserted(true);
			
		  }
			com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation model = new com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation();
			// org.springframework.beans.BeanUtils.copyProperties(modelFromDB, model);
			model.setDateUpdatedFromSource(BasicDataGenerator.getLocalDateTime(commercialSexualExploitation.getDateUpdated()));
			performMatch(domain, modelFromDB, model, data);
		  hydrateCommonFields(model, domain,commercialSexualExploitation.getCommercialSexualExploitationID(),data);
		  return model;
      }

	   public com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation createCommercialSexualExploitation(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation commercialSexualExploitation){
	       commercialSexualExploitation.setId(UUID.randomUUID()); 
	       insert(commercialSexualExploitation);
	       return commercialSexualExploitation;
	   }
	   public com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation updateCommercialSexualExploitation(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation commercialSexualExploitation){
	       update(commercialSexualExploitation);
	       return commercialSexualExploitation;
	   }
	   public void deleteCommercialSexualExploitation(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation commercialSexualExploitation){
	       delete(commercialSexualExploitation);
	   }
	   public com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation getCommercialSexualExploitationById(UUID commercialSexualExploitationId){ 
		      DetachedCriteria criteria=DetachedCriteria.forClass(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class);
		      criteria.add(Restrictions.eq("id", commercialSexualExploitationId));
		      List<com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation> entities = (List<com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation>) findByCriteria(criteria);
		      if(!entities.isEmpty()) return entities.get(0);
		      return null;
	   }
	   public List<com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation> getAllEnrollmentCommercialSexualExploitations(UUID enrollmentId,Integer startIndex, Integer maxItems){
	       DetachedCriteria criteria=DetachedCriteria.forClass(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class);
	       criteria.createAlias("enrollmentid", "enrollmentid");
	       criteria.add(Restrictions.eq("enrollmentid.id", enrollmentId));
	       return (List<com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation>) findByCriteria(criteria,startIndex,maxItems);
	   }
	   public long getEnrollmentCommercialSexualExploitationsCount(UUID enrollmentId){
	       DetachedCriteria criteria=DetachedCriteria.forClass(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation.class);
	       criteria.createAlias("enrollmentid", "enrollmentid");
	       criteria.add(Restrictions.eq("enrollmentid.id", enrollmentId));
	       return countRows(criteria);
	   }
}
