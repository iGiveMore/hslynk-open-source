package com.servinglynk.hmis.warehouse.model.v2020;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.Map;
import java.util.UUID;
import java.util.WeakHashMap;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Type;
import org.hibernate.proxy.HibernateProxy;

import com.servinglynk.hmis.warehouse.enums.AssessmentLevelEnum;
import com.servinglynk.hmis.warehouse.enums.AssessmentTypeEnum;
import com.servinglynk.hmis.warehouse.enums.PrioritizationStatusEnum;


/**
 * Object mapping for hibernate-handled table: affiliation.
 *
 *
 * @author autogenerated
 */


@Entity(name = "assessment_v2020")
@Table(name = "assessment", catalog = "hmis", schema = "v2020")
public class Assessment extends HmisBaseModel implements Cloneable, Serializable {

	/** Serial Version UID. */
	private static final long serialVersionUID = -4677579144054660425L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, java.util.UUID> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, java.util.UUID>());

	/** hashCode temporary storage. */
	private volatile java.util.UUID hashCode;
	private UUID id;
	private Enrollment enrollmentid;
	private UUID clientId;
	private UUID dedupClientId;
	private LocalDateTime assessmentDate;
	private String assessmentLocation;
	private AssessmentTypeEnum assessmentType;
	private AssessmentLevelEnum assessmentLevel;
	private PrioritizationStatusEnum prioritizationStatus;
	
	/** Field mapping. */
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Assessment() {
		// Default constructor
	}

	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Assessment.class;
	}

	 /**
	 * Return the value associated with the column: id.
	 * @return A java.util.UUID object (this.id)
	 */
	  @Id
	  @Basic( optional = false )
	  @Column( name = "id", nullable = false  ) @org.hibernate.annotations.Type(type="org.hibernate.type.PostgresUUIDType")
	public java.util.UUID getId() {
		return this.id;

	}



	 /**
	 * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final java.util.UUID id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

	/**
	 * @return the clientid
	 */
	@Basic( optional = false )
	@Column( name = "client_id", nullable = false  ) @org.hibernate.annotations.Type(type="org.hibernate.type.PostgresUUIDType")
	public UUID getClientId() {
		return clientId;
	}

	/**
	 * @param clientid the clientid to set
	 */
	public void setClientId(UUID clientid) {
		this.clientId = clientid;
	}

	/**
	 * @return the dedupClientId
	 */
	@Basic( optional = false )
	@Column( name = "dedup_client_id", nullable = false  ) @org.hibernate.annotations.Type(type="org.hibernate.type.PostgresUUIDType")
	public UUID getDedupClientId() {
		return dedupClientId;
	}

	/**
	 * @param dedupClientId the dedupClientId to set
	 */
	public void setDedupClientId(UUID dedupClientId) {
		this.dedupClientId = dedupClientId;
	}

	/**
	 * Return the value associated with the column: entrydate.
	 * @return A LocalDateTime object (this.entrydate)
	 */
	@Type(type="org.jadira.usertype.dateandtime.threeten.PersistentLocalDateTime")
	@Column( name = "assessment_date")
	public LocalDateTime getAssessmentDate() {
		return this.assessmentDate;

	}



	 /**
	 * Set the value related to the column: entrydate.
	 * @param entrydate the entrydate value you wish to set
	 */
	public void setAssessmentDate(final LocalDateTime assessmentDate) {
		this.assessmentDate = assessmentDate;
	}

	 /**
		 * Return the value associated with the column: enrollmentid.
		 * @return A Enrollment object (this.enrollmentid)
		 */
		@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
		@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
		@Basic( optional = true )
		@JoinColumn(name = "enrollmentid", nullable = true )
		public Enrollment getEnrollmentid() {
			return this.enrollmentid;

		}



		 /**
		 * Set the value related to the column: enrollmentid.
		 * @param enrollmentid the enrollmentid value you wish to set
		 */
		public void setEnrollmentid(final Enrollment enrollmentid) {
			this.enrollmentid = enrollmentid;
		}
		
	/** Field mapping. */
	protected Export export;
	 /**
	 * Return the value associated with the column: export.
	 * @return A Export object (this.export)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "export_id", nullable = true )
	public Export getExport() {
		return this.export;

	}

	 /**
	 * @return the assessmentLocation
	 */
	@Basic( optional = true )
	@Column( name = "assessment_location", length = 500  )
	public String getAssessmentLocation() {
		return assessmentLocation;
	}

	/**
	 * @param assessmentLocation the assessmentLocation to set
	 */
	public void setAssessmentLocation(String assessmentLocation) {
		this.assessmentLocation = assessmentLocation;
	}
	
	
	/**
	 * @return the assessmentType
	 */
		 /**
		 * Return the value associated with the column: disabilitytype.
		 * @return A DisabilitiesDisabilitytypeEnum object (this.disabilitytype)
		 */
	@Type(type = "com.servinglynk.hmis.warehouse.enums.AssessmentTypeEnumType")
	@Basic( optional = true )
	@Column( name = "assessment_type" )	
	public AssessmentTypeEnum getAssessmentType() {
		return assessmentType;
	}

	/**
	 * @param assessmentType the assessmentType to set
	 */
	public void setAssessmentType(AssessmentTypeEnum assessmentType) {
		this.assessmentType = assessmentType;
	}

	/**
	 * @return the assessmentLevel
	 */
	@Type(type = "com.servinglynk.hmis.warehouse.enums.AssessmentLevelEnumType")
	@Basic( optional = true )
	@Column( name = "assessment_level" )	
	public AssessmentLevelEnum getAssessmentLevel() {
		return assessmentLevel;
	}

	/**
	 * @param assessmentLevel the assessmentLevel to set
	 */
	public void setAssessmentLevel(AssessmentLevelEnum assessmentLevel) {
		this.assessmentLevel = assessmentLevel;
	}

	/**
	 * @return the prioritizationStatus
	 */
	@Type(type = "com.servinglynk.hmis.warehouse.enums.PrioritizationStatusEnumType")
	@Basic( optional = true )
	@Column( name = "prioritization_status" )
	public PrioritizationStatusEnum getPrioritizationStatus() {
		return prioritizationStatus;
	}

	/**
	 * @param prioritizationStatus the prioritizationStatus to set
	 */
	public void setPrioritizationStatus(PrioritizationStatusEnum prioritizationStatus) {
		this.prioritizationStatus = prioritizationStatus;
	}

	/**
	 * Set the value related to the column: export.
	 * @param export the export value you wish to set
	 */
	public void setExport(final Export export) {
		this.export = export;
	}
   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Assessment clone() throws CloneNotSupportedException {

        final Assessment copy = (Assessment)super.clone();

		copy.setDateCreated(this.getDateCreated());
		copy.setDateCreatedFromSource(this.getDateCreatedFromSource());
		copy.setDateUpdated(this.getDateUpdated());
		copy.setDateUpdatedFromSource(this.getDateUpdatedFromSource());
		copy.setDeleted(this.isDeleted());
		copy.setExport(this.getExport());
		copy.setId(this.getId());
		copy.setParentId(this.getParentId());
		copy.setProjectGroupCode(this.getProjectGroupCode());
		copy.setSync(this.isSync());
		copy.setUserId(this.getUserId());
		copy.setVersion(this.getVersion());
		return copy;
	}



	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();

		sb.append("dateCreated: " + this.getDateCreated() + ", ");
		sb.append("dateCreatedFromSource: " + this.getDateCreatedFromSource() + ", ");
		sb.append("dateUpdated: " + this.getDateUpdated() + ", ");
		sb.append("dateUpdatedFromSource: " + this.getDateUpdatedFromSource() + ", ");
		sb.append("deleted: " + this.isDeleted() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("parentId: " + this.getParentId() + ", ");
		sb.append("projectGroupCode: " + this.getProjectGroupCode() + ", ");
		sb.append("sync: " + this.isSync() + ", ");
		sb.append("userId: " + this.getUserId() + ", ");
		sb.append("version: " + this.getVersion());
		return sb.toString();
	}


	/** Equals implementation.
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;

		if ( this == aThat ) {
			 return true;
		}


		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation();
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}

		final Assessment that;
		try {
			that = (Assessment) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}


		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getDateCreated() == null) && (that.getDateCreated() == null)) || (getDateCreated() != null && getDateCreated().equals(that.getDateCreated())));
		result = result && (((getDateCreatedFromSource() == null) && (that.getDateCreatedFromSource() == null)) || (getDateCreatedFromSource() != null && getDateCreatedFromSource().equals(that.getDateCreatedFromSource())));
		result = result && (((getDateUpdated() == null) && (that.getDateUpdated() == null)) || (getDateUpdated() != null && getDateUpdated().equals(that.getDateUpdated())));
		result = result && (((getDateUpdatedFromSource() == null) && (that.getDateUpdatedFromSource() == null)) || (getDateUpdatedFromSource() != null && getDateUpdatedFromSource().equals(that.getDateUpdatedFromSource())));
		result = result && (((getExport() == null) && (that.getExport() == null)) || (getExport() != null && getExport().getId().equals(that.getExport().getId())));
		result = result && (((getParentId() == null) && (that.getParentId() == null)) || (getParentId() != null && getParentId().equals(that.getParentId())));
		result = result && (((getEnrollmentid() == null) && (that.getEnrollmentid() == null)) || (getEnrollmentid() != null && getEnrollmentid().getId().equals(that.getEnrollmentid().getId())));
		result = result && (((getProjectGroupCode() == null) && (that.getProjectGroupCode() == null)) || (getProjectGroupCode() != null && getProjectGroupCode().equals(that.getProjectGroupCode())));
		result = result && (((getUserId() == null) && (that.getUserId() == null)) || (getUserId() != null && getUserId().equals(that.getUserId())));
		result = result && (((getVersion() == null) && (that.getVersion() == null)) || (getVersion() != null && getVersion().equals(that.getVersion())));
		return result;
	}
}
