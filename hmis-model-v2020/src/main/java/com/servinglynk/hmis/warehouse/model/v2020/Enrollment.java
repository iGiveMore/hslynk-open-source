package com.servinglynk.hmis.warehouse.model.v2020;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Type;
import org.hibernate.proxy.HibernateProxy;

import com.servinglynk.hmis.warehouse.enums.EnrollmentDisablingconditionEnum;
import com.servinglynk.hmis.warehouse.enums.EnrollmentMonthshomelesspastthreeyearsEnum;
import com.servinglynk.hmis.warehouse.enums.EnrollmentRelationshiptohohEnum;
import com.servinglynk.hmis.warehouse.enums.EnrollmentTimeshomelesspastthreeyearsEnum;
import com.servinglynk.hmis.warehouse.enums.LengthOfStayEnum;
import com.servinglynk.hmis.warehouse.enums.LivingSituationEnum;
import com.servinglynk.hmis.warehouse.enums.NoYesEnum;
import com.servinglynk.hmis.warehouse.model.EnrollmentSharingModel;


/**
 * Object mapping for hibernate-handled table: enrollment.
 *
 *
 * @author autogenerated
 */
@Entity (name = "enrollment_v2020")
@Table(name = "enrollment", catalog = "hmis", schema = "v2020")
public class Enrollment extends HmisBaseModel implements Cloneable, Serializable,EnrollmentSharingModel{

	/** Serial Version UID. */
	private static final long serialVersionUID = -6048419471750369756L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, java.util.UUID> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, java.util.UUID>());

	/** hashCode temporary storage. */
	private volatile java.util.UUID hashCode;


	/** Field mapping. */
	private Client client;

	/** Field mapping. */
	private Set<Contact> contacts = new HashSet<Contact>();

	/** Field mapping. */
	private Set<Dateofengagement> dateofengagements = new HashSet<Dateofengagement>();

	/** Field mapping. */
	private LocalDateTime datetostreetessh;
	/** Field mapping. */
	private Set<Disabilities> disabilitieses = new HashSet<Disabilities>();

	/** Field mapping. */
	private EnrollmentDisablingconditionEnum disablingcondition;

	private EnrollmentTimeshomelesspastthreeyearsEnum timeshomelesspastthreeyears;
	/** Field mapping. */
	private Set<Domesticviolence> domesticviolences = new HashSet<Domesticviolence>();

	/** Field mapping. */
	private Set<Employment> employments = new HashSet<Employment>();
	/** Field mapping. */
	private Set<EnrollmentCoc> enrollmentCocs = new HashSet<EnrollmentCoc>();
	
	/** Field mapping. */
	private Set<Education> educations = new HashSet<Education>();

	/** Field mapping. */
	private LocalDateTime entrydate;
	
	/** Field mapping. */
	private Set<Entryrhsp> entryrhsps = new HashSet<Entryrhsp>();

	/** Field mapping. */
	private Set<Entryrhy> entryrhies = new HashSet<Entryrhy>();

	/** Field mapping. */
	private Set<Entryssvf> entryssvfs = new HashSet<Entryssvf>();

	/** Field mapping. */
	private Set<Exit> exits = new HashSet<Exit>();

	/** Field mapping. */
	private Set<Healthinsurance> healthinsurances = new HashSet<Healthinsurance>();

	/** Field mapping. */
	private Set<HealthStatus> healthStatuses = new HashSet<HealthStatus>();

	/** Field mapping. */
	private String householdid;
	/** Field mapping. */
	private java.util.UUID id;
	/** Field mapping. */
	private Set<Incomeandsources> incomeandsourceses = new HashSet<Incomeandsources>();

	/** Field mapping. */
	private Set<ConnectionWithSoar> connectionWithSoars = new HashSet<ConnectionWithSoar>();


	/** Field mapping. */
	private Set<Medicalassistance> medicalassistances = new HashSet<Medicalassistance>();

	/** Field mapping. */
	private EnrollmentMonthshomelesspastthreeyearsEnum monthshomelesspastthreeyears;
	/** Field mapping. */
	private Set<Noncashbenefits> noncashbenefitss = new HashSet<Noncashbenefits>();

	/** Field mapping. */
	private Set<Pathstatus> pathStatuses = new HashSet<Pathstatus>();

	/** Field mapping. */
	private Project projectid;
	/** Field mapping. */
	private EnrollmentRelationshiptohohEnum relationshiptohoh;
	
	/** Field mapping. */
	private Set<Moveindate> moveinDates = new HashSet<Moveindate>();

	/** Field mapping. */
	private Set<RhybcpStatus> rhybcpStatuses = new HashSet<RhybcpStatus>();

	/** Field mapping. */
	private Set<ServiceFaReferral> serviceFaReferrals = new HashSet<ServiceFaReferral>();
	
	/** Field mapping. */
	private Set<Assessment> assessments = new HashSet<Assessment>();
	/** Field mapping. */
	private Set<AssessmentQuestions> assessmentQuestions = new HashSet<AssessmentQuestions>();
	/** Field mapping. */
	private Set<AssessmentResults> assessmentResults = new HashSet<AssessmentResults>();
	/** Field mapping. */
	private Set<CurrentLivingSituation> currentLivingSituations = new HashSet<CurrentLivingSituation>();
	/** Field mapping. */
	private Set<Event> events = new HashSet<Event>();
	
	private boolean chronicHomeless;
	private NoYesEnum losunderthreshold;
	private NoYesEnum previousStreetESSH;
	
	private LivingSituationEnum livingSituation;
	private LengthOfStayEnum lengthOfStay;
	private String source;
	
	private HmisHousehold hmisHousehold;
	
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Enrollment() {
		// Default constructor
	}

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Enrollment(java.util.UUID id) {
		this.id = id;
	}


	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Enrollment.class;
	}


	 /**
	 * Return the value associated with the column: client.
	 * @return A Client object (this.client)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "client_id", nullable = true )
	public Client getClient() {
		return this.client;

	}



	 /**
	 * Set the value related to the column: client.
	 * @param client the client value you wish to set
	 */
	public void setClient(final Client client) {
		this.client = client;
	}
	
	@Type(type = "com.servinglynk.hmis.warehouse.enums.LivingSituationEnumType")
	@Basic( optional = true )
	@Column( name = "livingSituation" )
	 public LivingSituationEnum getLivingSituation() {
		return livingSituation;
	}

	public void setLivingSituation(LivingSituationEnum livingSituation) {
		this.livingSituation = livingSituation;
	}
	@Type(type = "com.servinglynk.hmis.warehouse.enums.LengthOfStayEnumType")
	@Basic( optional = true )
	@Column( name = "lengthOfStay" )
	public LengthOfStayEnum getLengthOfStay() {
		return lengthOfStay;
	}

	public void setLengthOfStay(LengthOfStayEnum lengthOfStay) {
		this.lengthOfStay = lengthOfStay;
	}

	/**
	 * Return the value associated with the column: contact.
	 * @return A Set&lt;Contact&gt; object (this.contact)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Contact> getContacts() {
		return this.contacts;

	}

	/**
	 * Adds a bi-directional link of type Contact to the contacts set.
	 * @param contact item to add
	 */
	public void addContact(Contact contact) {
		contact.setEnrollmentid(this);
		this.contacts.add(contact);
	}


	 /**
	 * Set the value related to the column: contact.
	 * @param contact the contact value you wish to set
	 */
	public void setContacts(final Set<Contact> contact) {
		this.contacts = contact;
	}

	 /**
	 * Return the value associated with the column: dateofengagement.
	 * @return A Set&lt;Dateofengagement&gt; object (this.dateofengagement)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Dateofengagement> getDateofengagements() {
		return this.dateofengagements;

	}

	/**
	 * Adds a bi-directional link of type Dateofengagement to the dateofengagements set.
	 * @param dateofengagement item to add
	 */
	public void addDateofengagement(Dateofengagement dateofengagement) {
		dateofengagement.setEnrollmentid(this);
		this.dateofengagements.add(dateofengagement);
	}


	 /**
	 * Set the value related to the column: dateofengagement.
	 * @param dateofengagement the dateofengagement value you wish to set
	 */
	public void setDateofengagements(final Set<Dateofengagement> dateofengagement) {
		this.dateofengagements = dateofengagement;
	}

	 /**
	 * Return the value associated with the column: datetostreetessh.
	 * @return A Integer object (this.datetostreetessh)
	 */
	@Type(type="org.jadira.usertype.dateandtime.threeten.PersistentLocalDateTime")
	public LocalDateTime getDatetostreetessh() {
		return this.datetostreetessh;

	}



	 /**
	 * Set the value related to the column: datetostreetessh.
	 * @param datetostreetessh the datetostreetessh value you wish to set
	 */
	public void setDatetostreetessh(final LocalDateTime datetostreetessh) {
		this.datetostreetessh = datetostreetessh;
	}

	 /**
	 * Return the value associated with the column: disabilities.
	 * @return A Set&lt;Disabilities&gt; object (this.disabilities)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Disabilities> getDisabilitieses() {
		return this.disabilitieses;

	}

	/**
	 * Adds a bi-directional link of type Disabilities to the disabilitieses set.
	 * @param disabilities item to add
	 */
	public void addDisabilities(Disabilities disabilities) {
		disabilities.setEnrollmentid(this);
		this.disabilitieses.add(disabilities);
	}


	 /**
	 * Set the value related to the column: disabilities.
	 * @param disabilities the disabilities value you wish to set
	 */
	public void setDisabilitieses(final Set<Disabilities> disabilities) {
		this.disabilitieses = disabilities;
	}



	 /**
	 * @return the assessments
	 */
	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Assessment> getAssessments() {
		return assessments;
	}

	/**
	 * @param assessments the assessments to set
	 */
	public void setAssessments(Set<Assessment> assessments) {
		this.assessments = assessments;
	}

	/**
	 * @return the assessmentQuestions
	 */
	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<AssessmentQuestions> getAssessmentQuestions() {
		return assessmentQuestions;
	}

	/**
	 * @param assessmentQuestions the assessmentQuestions to set
	 */
	public void setAssessmentQuestions(Set<AssessmentQuestions> assessmentQuestions) {
		this.assessmentQuestions = assessmentQuestions;
	}

	/**
	 * @return the assessmentResults
	 */
	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<AssessmentResults> getAssessmentResults() {
		return assessmentResults;
	}

	/**
	 * @param assessmentResults the assessmentResults to set
	 */
	public void setAssessmentResults(Set<AssessmentResults> assessmentResults) {
		this.assessmentResults = assessmentResults;
	}

	/**
	 * @return the currentLivingSituations
	 */
	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<CurrentLivingSituation> getCurrentLivingSituations() {
		return currentLivingSituations;
	}

	/**
	 * @param currentLivingSituations the currentLivingSituations to set
	 */
	public void setCurrentLivingSituations(Set<CurrentLivingSituation> currentLivingSituations) {
		this.currentLivingSituations = currentLivingSituations;
	}

	/**
	 * @return the events
	 */
	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Event> getEvents() {
		return events;
	}

	/**
	 * @param events the events to set
	 */
	public void setEvents(Set<Event> events) {
		this.events = events;
	}

	/**
	 * Return the value associated with the column: domesticviolence.
	 * @return A Set&lt;Domesticviolence&gt; object (this.domesticviolence)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Domesticviolence> getDomesticviolences() {
		return this.domesticviolences;

	}

	/**
	 * Adds a bi-directional link of type Domesticviolence to the domesticviolences set.
	 * @param domesticviolence item to add
	 */
	public void addDomesticviolence(Domesticviolence domesticviolence) {
		domesticviolence.setEnrollmentid(this);
		this.domesticviolences.add(domesticviolence);
	}


	 /**
	 * Set the value related to the column: domesticviolence.
	 * @param domesticviolence the domesticviolence value you wish to set
	 */
	public void setDomesticviolences(final Set<Domesticviolence> domesticviolence) {
		this.domesticviolences = domesticviolence;
	}

	 /**
	 * Return the value associated with the column: employment.
	 * @return A Set&lt;Employment&gt; object (this.employment)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Employment> getEmployments() {
		return this.employments;

	}

	/**
	 * Adds a bi-directional link of type Employment to the employments set.
	 * @param employment item to add
	 */
	public void addEmployment(Employment employment) {
		employment.setEnrollmentid(this);
		this.employments.add(employment);
	}


	 /**
	 * Set the value related to the column: employment.
	 * @param employment the employment value you wish to set
	 */
	public void setEmployments(final Set<Employment> employment) {
		this.employments = employment;
	}

	/* Return the value associated with the column: employment.
	 * @return A Set&lt;EnrollmentCoc&gt; object (this.employment)
	 */
	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<EnrollmentCoc> getEnrollmentCocs() {
		return this.enrollmentCocs;

	}

	/**
	 * Adds a bi-directional link of type Employment to the employments set.
	 * @param employment item to add
	 */
	public void addEmployment(EnrollmentCoc enrollmentCoc) {
		enrollmentCoc.setEnrollmentid(this);
		this.enrollmentCocs.add(enrollmentCoc);
	}


	 /**
	 * Set the value related to the column: employment.
	 * @param employment the employment value you wish to set
	 */
	public void setEnrollmentCocs(final Set<EnrollmentCoc> enrollmentCocs) {
		this.enrollmentCocs = enrollmentCocs;
	}
	 /**
	 * Return the value associated with the column: employment.
	 * @return A Set&lt;Employment&gt; object (this.employment)
	 */
	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	 public Set<Education> getEducations() {
		return educations;
	}

	public void setEducations(Set<Education> educations) {
		this.educations = educations;
	}

	/**
	 * Adds a bi-directional link of type Employment to the employments set.
	 * @param employment item to add
	 */
	public void addEducation(Education education) {
		education.setEnrollmentid(this);
		this.educations.add(education);
	}

	
	/**
	 * Return the value associated with the column: entrydate.
	 * @return A LocalDateTime object (this.entrydate)
	 */
	@Type(type="org.jadira.usertype.dateandtime.threeten.PersistentLocalDateTime")
	public LocalDateTime getEntrydate() {
		return this.entrydate;

	}



	 /**
	 * Set the value related to the column: entrydate.
	 * @param entrydate the entrydate value you wish to set
	 */
	public void setEntrydate(final LocalDateTime entrydate) {
		this.entrydate = entrydate;
	}

	/**
	 * Return the value associated with the column: entryrhsp.
	 * @return A Set&lt;Entryrhsp&gt; object (this.entryrhsp)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Entryrhsp> getEntryrhsps() {
		return this.entryrhsps;

	}

	/**
	 * Adds a bi-directional link of type Entryrhsp to the entryrhsps set.
	 * @param entryrhsp item to add
	 */
	public void addEntryrhsp(Entryrhsp entryrhsp) {
		entryrhsp.setEnrollmentid(this);
		this.entryrhsps.add(entryrhsp);
	}


	 /**
	 * Set the value related to the column: entryrhsp.
	 * @param entryrhsp the entryrhsp value you wish to set
	 */
	public void setEntryrhsps(final Set<Entryrhsp> entryrhsp) {
		this.entryrhsps = entryrhsp;
	}

	 /**
	 * Return the value associated with the column: entryrhy.
	 * @return A Set&lt;Entryrhy&gt; object (this.entryrhy)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Entryrhy> getEntryrhies() {
		return this.entryrhies;

	}

	/**
	 * Adds a bi-directional link of type Entryrhy to the entryrhies set.
	 * @param entryrhy item to add
	 */
	public void addEntryrhy(Entryrhy entryrhy) {
		entryrhy.setEnrollmentid(this);
		this.entryrhies.add(entryrhy);
	}


	 /**
	 * Set the value related to the column: entryrhy.
	 * @param entryrhy the entryrhy value you wish to set
	 */
	public void setEntryrhies(final Set<Entryrhy> entryrhy) {
		this.entryrhies = entryrhy;
	}

	 /**
	 * Return the value associated with the column: entryssvf.
	 * @return A Set&lt;Entryssvf&gt; object (this.entryssvf)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Entryssvf> getEntryssvfs() {
		return this.entryssvfs;

	}

	/**
	 * Adds a bi-directional link of type Entryssvf to the entryssvfs set.
	 * @param entryssvf item to add
	 */
	public void addEntryssvf(Entryssvf entryssvf) {
		entryssvf.setEnrollmentid(this);
		this.entryssvfs.add(entryssvf);
	}


	 /**
	 * Set the value related to the column: entryssvf.
	 * @param entryssvf the entryssvf value you wish to set
	 */
	public void setEntryssvfs(final Set<Entryssvf> entryssvf) {
		this.entryssvfs = entryssvf;
	}

	 /**
	 * Return the value associated with the column: exit.
	 * @return A Set&lt;Exit&gt; object (this.exit)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Exit> getExits() {
		return this.exits;

	}

	/**
	 * Adds a bi-directional link of type Exit to the exits set.
	 * @param exit item to add
	 */
	public void addExit(Exit exit) {
		exit.setEnrollmentid(this);
		this.exits.add(exit);
	}


	 /**
	 * Set the value related to the column: exit.
	 * @param exit the exit value you wish to set
	 */
	public void setExits(final Set<Exit> exit) {
		this.exits = exit;
	}
	 /**
	 * Return the value associated with the column: healthinsurance.
	 * @return A Set&lt;Healthinsurance&gt; object (this.healthinsurance)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Healthinsurance> getHealthinsurances() {
		return this.healthinsurances;

	}

	/**
	 * Adds a bi-directional link of type Healthinsurance to the healthinsurances set.
	 * @param healthinsurance item to add
	 */
	public void addHealthinsurance(Healthinsurance healthinsurance) {
		healthinsurance.setEnrollmentid(this);
		this.healthinsurances.add(healthinsurance);
	}


	 /**
	 * Set the value related to the column: healthinsurance.
	 * @param healthinsurance the healthinsurance value you wish to set
	 */
	public void setHealthinsurances(final Set<Healthinsurance> healthinsurance) {
		this.healthinsurances = healthinsurance;
	}

	 /**
	 * Return the value associated with the column: healthStatus.
	 * @return A Set&lt;HealthStatus&gt; object (this.healthStatus)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<HealthStatus> getHealthStatuses() {
		return this.healthStatuses;

	}

	/**
	 * Adds a bi-directional link of type HealthStatus to the healthStatuses set.
	 * @param healthStatus item to add
	 */
	public void addHealthStatus(HealthStatus healthStatus) {
		healthStatus.setEnrollmentid(this);
		this.healthStatuses.add(healthStatus);
	}


	 /**
	 * Set the value related to the column: healthStatus.
	 * @param healthStatus the healthStatus value you wish to set
	 */
	public void setHealthStatuses(final Set<HealthStatus> healthStatus) {
		this.healthStatuses = healthStatus;
	}

	 /**
	 * Return the value associated with the column: householdid.
	 * @return A java.util.UUID object (this.householdid)
	 */
	@Basic( optional = true )
	@Column( name = "householdid" )
	public String getHouseholdid() {
		return this.householdid;
	}

	 /**
	 * Set the value related to the column: householdid.
	 * @param householdid the householdid value you wish to set
	 */
	public void setHouseholdid(final String householdid) {
		this.householdid = householdid;
	}

	
	
	 /**
	 * Return the value associated with the column: id.
	 * @return A java.util.UUID object (this.id)
	 */
	@Id
	@Basic( optional = false )
    @Column( name = "id", nullable = false  ) @org.hibernate.annotations.Type(type="org.hibernate.type.PostgresUUIDType")
	public java.util.UUID getId() {
		return this.id;

	}



	 /**
	 * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final java.util.UUID id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}
 	@Column(name="chronicHomeless")
	public boolean isChronicHomeless() {
		return chronicHomeless;
	}

	public void setChronicHomeless(boolean chronicHomeless) {
		this.chronicHomeless = chronicHomeless;
	}
	 /**
	 * Return the value associated with the column: incomeandsources.
	 * @return A Set&lt;Incomeandsources&gt; object (this.incomeandsources)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Incomeandsources> getIncomeandsourceses() {
		return this.incomeandsourceses;

	}

	/**
	 * Adds a bi-directional link of type Incomeandsources to the incomeandsourceses set.
	 * @param incomeandsources item to add
	 */
	public void addIncomeandsources(Incomeandsources incomeandsources) {
		incomeandsources.setEnrollmentid(this);
		this.incomeandsourceses.add(incomeandsources);
	}


	 /**
	 * Set the value related to the column: incomeandsources.
	 * @param incomeandsources the incomeandsources value you wish to set
	 */
	public void setIncomeandsourceses(final Set<Incomeandsources> incomeandsources) {
		this.incomeandsourceses = incomeandsources;
	}

	 /**
	 * Return the value associated with the column: incomeandsources.
	 * @return A Set&lt;Incomeandsources&gt; object (this.incomeandsources)
	 */
	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<ConnectionWithSoar> getConnectionWithSoars() {
		return this.connectionWithSoars;

	}

	/**
	 * Adds a bi-directional link of type Incomeandsources to the incomeandsourceses set.
	 * @param incomeandsources item to add
	 */
	public void addIncomeandsources(ConnectionWithSoar connectionWithSoar) {
		connectionWithSoar.setEnrollmentid(this);
		this.connectionWithSoars.add(connectionWithSoar);
	}


	 /**
	 * Set the value related to the column: incomeandsources.
	 * @param incomeandsources the incomeandsources value you wish to set
	 */
	public void setConnectionWithSoars(final Set<ConnectionWithSoar> connectionWithSoars) {
		this.connectionWithSoars = connectionWithSoars;
	}

	

	
	
	
	 /**
	 * Return the value associated with the column: medicalassistance.
	 * @return A Set&lt;Medicalassistance&gt; object (this.medicalassistance)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Medicalassistance> getMedicalassistances() {
		return this.medicalassistances;

	}

	/**
	 * Adds a bi-directional link of type Medicalassistance to the medicalassistances set.
	 * @param medicalassistance item to add
	 */
	public void addMedicalassistance(Medicalassistance medicalassistance) {
		medicalassistance.setEnrollmentid(this);
		this.medicalassistances.add(medicalassistance);
	}


	 /**
	 * Set the value related to the column: medicalassistance.
	 * @param medicalassistance the medicalassistance value you wish to set
	 */
	public void setMedicalassistances(final Set<Medicalassistance> medicalassistance) {
		this.medicalassistances = medicalassistance;
	}

	 /**
	 * Return the value associated with the column: monthshomelesspastthreeyears.
	 * @return A EnrollmentMonthshomelesspastthreeyearsEnum object (this.monthshomelesspastthreeyears)
	 */
	@Type(type = "com.servinglynk.hmis.warehouse.enums.EnrollmentMonthshomelesspastthreeyearsEnumType")
	@Basic( optional = true )
	@Column( name = "monthshomelesspastthreeyears" )
	public EnrollmentMonthshomelesspastthreeyearsEnum getMonthshomelesspastthreeyears() {
		return this.monthshomelesspastthreeyears;

	}



	 /**
	 * Set the value related to the column: monthshomelesspastthreeyears.
	 * @param monthshomelesspastthreeyears the monthshomelesspastthreeyears value you wish to set
	 */
	public void setMonthshomelesspastthreeyears(final EnrollmentMonthshomelesspastthreeyearsEnum monthshomelesspastthreeyears) {
		this.monthshomelesspastthreeyears = monthshomelesspastthreeyears;
	}

	 /**
	 * Return the value associated with the column: noncashbenefits.
	 * @return A Set&lt;Noncashbenefits&gt; object (this.noncashbenefits)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Noncashbenefits> getNoncashbenefitss() {
		return this.noncashbenefitss;

	}

	/**
	 * Adds a bi-directional link of type Noncashbenefits to the noncashbenefitss set.
	 * @param noncashbenefits item to add
	 */
	public void addNoncashbenefits(Noncashbenefits noncashbenefits) {
		noncashbenefits.setEnrollmentid(this);
		this.noncashbenefitss.add(noncashbenefits);
	}


	 /**
	 * Set the value related to the column: noncashbenefits.
	 * @param noncashbenefits the noncashbenefits value you wish to set
	 */
	public void setNoncashbenefitss(final Set<Noncashbenefits> noncashbenefits) {
		this.noncashbenefitss = noncashbenefits;
	}

	
	 /**
	 * Return the value associated with the column: pathStatus.
	 * @return A Set&lt;PathStatus&gt; object (this.pathStatus)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Pathstatus> getPathStatuses() {
		return this.pathStatuses;

	}

	/**
	 * Adds a bi-directional link of type PathStatus to the pathStatuses set.
	 * @param pathStatus item to add
	 */
	public void addPathStatus(Pathstatus pathStatus) {
		pathStatus.setEnrollmentid(this);
		this.pathStatuses.add(pathStatus);
	}


	 /**
	 * Set the value related to the column: pathStatus.
	 * @param pathStatus the pathStatus value you wish to set
	 */
	public void setPathStatuses(final Set<Pathstatus> pathStatus) {
		this.pathStatuses = pathStatus;
	}


	 /**
	 * Return the value associated with the column: projectid.
	 * @return A Project object (this.projectid)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "projectid", nullable = true )
	public Project getProject() {
		return this.projectid;

	}



	 /**
	 * Set the value related to the column: projectid.
	 * @param projectid the projectid value you wish to set
	 */
	public void setProject(final Project projectid) {
		this.projectid = projectid;
	}




	 /**
	 * Return the value associated with the column: relationshiptohoh.
	 * @return A EnrollmentRelationshiptohohEnum object (this.relationshiptohoh)
	 */
	@Type(type = "com.servinglynk.hmis.warehouse.enums.EnrollmentRelationshiptohohEnumType")
	@Basic( optional = true )
	@Column( name = "relationshiptohoh" )
	public EnrollmentRelationshiptohohEnum getRelationshiptohoh() {
		return this.relationshiptohoh;

	}
	 /**
	 * Set the value related to the column: relationshiptohoh.
	 * @param relationshiptohoh the relationshiptohoh value you wish to set
	 */
	public void setRelationshiptohoh(final EnrollmentRelationshiptohohEnum relationshiptohoh) {
		this.relationshiptohoh = relationshiptohoh;
	}

	 /**
	 * Return the value associated with the column: residentialmoveindate.
	 * @return A Set&lt;Residentialmoveindate&gt; object (this.residentialmoveindate)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Moveindate> getMoveinDates() {
		return this.moveinDates;

	}

	/**
	 * Adds a bi-directional link of type Residentialmoveindate to the residentialmoveindates set.
	 * @param residentialmoveindate item to add
	 */
	public void addMoveinDates(Moveindate moveindate) {
		moveindate.setEnrollmentid(this);
		this.moveinDates.add(moveindate);
	}


	 /**
	 * Set the value related to the column: residentialmoveindate.
	 * @param residentialmoveindate the residentialmoveindate value you wish to set
	 */
	public void setMoveinDates(final Set<Moveindate> moveindates) {
		this.moveinDates = moveindates;
	}

	 /**
	 * Return the value associated with the column: rhybcpStatus.
	 * @return A Set&lt;RhybcpStatus&gt; object (this.rhybcpStatus)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<RhybcpStatus> getRhybcpStatuses() {
		return this.rhybcpStatuses;

	}

	/**
	 * Adds a bi-directional link of type RhybcpStatus to the rhybcpStatuses set.
	 * @param rhybcpStatus item to add
	 */
	public void addRhybcpStatus(RhybcpStatus rhybcpStatus) {
		rhybcpStatus.setEnrollmentid(this);
		this.rhybcpStatuses.add(rhybcpStatus);
	}


	 /**
	 * Set the value related to the column: rhybcpStatus.
	 * @param rhybcpStatus the rhybcpStatus value you wish to set
	 */
	public void setRhybcpStatuses(final Set<RhybcpStatus> rhybcpStatus) {
		this.rhybcpStatuses = rhybcpStatus;
	}

	/**
	 * Return the value associated with the column: serviceFaReferral.
	 * @return A Set&lt;ServiceFaReferral&gt; object (this.serviceFaReferral)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "enrollmentid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<ServiceFaReferral> getServiceFaReferrals() {
		return this.serviceFaReferrals;

	}

	/**
	 * Adds a bi-directional link of type ServiceFaReferral to the serviceFaReferrals set.
	 * @param serviceFaReferral item to add
	 */
	public void addServiceFaReferral(ServiceFaReferral serviceFaReferral) {
		serviceFaReferral.setEnrollmentid(this);
		this.serviceFaReferrals.add(serviceFaReferral);
	}


	 /**
	 * Set the value related to the column: serviceFaReferral.
	 * @param serviceFaReferral the serviceFaReferral value you wish to set
	 */
	public void setServiceFaReferrals(final Set<ServiceFaReferral> serviceFaReferral) {
		this.serviceFaReferrals = serviceFaReferral;
	}

	 /**
	 * Return the value associated with the column: timeshomelesspastthreeyears.
	 * @return A EnrollmentTimeshomelesspastthreeyearsEnum object (this.timeshomelesspastthreeyears)
	 */
	@Type(type = "com.servinglynk.hmis.warehouse.enums.EnrollmentTimeshomelesspastthreeyearsEnumType")
	@Basic( optional = true )
	@Column( name = "timeshomelesspastthreeyears" )
	public EnrollmentTimeshomelesspastthreeyearsEnum getTimeshomelesspastthreeyears() {
		return this.timeshomelesspastthreeyears;

	}



	 /**
	 * Set the value related to the column: timeshomelesspastthreeyears.
	 * @param timeshomelesspastthreeyears the timeshomelesspastthreeyears value you wish to set
	 */
	public void setTimeshomelesspastthreeyears(final EnrollmentTimeshomelesspastthreeyearsEnum timeshomelesspastthreeyears) {
		this.timeshomelesspastthreeyears = timeshomelesspastthreeyears;
	}

	/** Field mapping. */
	protected Export export;
	 /**
	 * Return the value associated with the column: export.
	 * @return A Export object (this.export)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "export_id", nullable = true )
	public Export getExport() {
		return this.export;

	}

	 /**
	 * @return the losunderthreshold
	 */
	@Type(type = "com.servinglynk.hmis.warehouse.enums.NoYesEnumType")
	@Basic( optional = true )
	@Column
	public NoYesEnum getLosunderthreshold() {
		return losunderthreshold;
	}

	/**
	 * @param losunderthreshold the losunderthreshold to set
	 */
	public void setLosunderthreshold(NoYesEnum losunderthreshold) {
		this.losunderthreshold = losunderthreshold;
	}

	 /**
	 * @return the losunderthreshold
	 */
	@Type(type = "com.servinglynk.hmis.warehouse.enums.NoYesEnumType")
	@Basic( optional = true )
	@Column
	public NoYesEnum getPreviousStreetESSH() {
		return previousStreetESSH;
	}

	/**
	 * @param previousStreetESSH the previousStreetESSH to set
	 */
	public void setPreviousStreetESSH(NoYesEnum previousStreetESSH) {
		this.previousStreetESSH = previousStreetESSH;
	}

	/**
	 * Set the value related to the column: export.
	 * @param export the export value you wish to set
	 */
	public void setExport(final Export export) {
		this.export = export;
	}
	
	@Column(name="source")
   public String getSource() {
		return source;
	}

	public void setSource(String source) {
		this.source = source;
	}
	
	@ManyToOne(fetch = FetchType.LAZY )
	@JoinColumn(name = "hmis_house_hold_id", nullable = true )
   public HmisHousehold getHmisHousehold() {
		return hmisHousehold;
	}

	public void setHmisHousehold(HmisHousehold hmisHousehold) {
		this.hmisHousehold = hmisHousehold;
	}
	
/**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Enrollment clone() throws CloneNotSupportedException {

        final Enrollment copy = (Enrollment)super.clone();

		copy.setClient(this.getClient());
		if (this.getContacts() != null) {
			copy.getContacts().addAll(this.getContacts());
		}
		if (this.getDateofengagements() != null) {
			copy.getDateofengagements().addAll(this.getDateofengagements());
		}
		copy.setDatetostreetessh(this.getDatetostreetessh());
		copy.setDateCreated(this.getDateCreated());
		copy.setDateCreatedFromSource(this.getDateCreatedFromSource());
		copy.setDateUpdated(this.getDateUpdated());
		copy.setDateUpdatedFromSource(this.getDateUpdatedFromSource());
		copy.setDeleted(this.isDeleted());
		if (this.getDisabilitieses() != null) {
			copy.getDisabilitieses().addAll(this.getDisabilitieses());
		}
		copy.setDisablingcondition(this.getDisablingcondition());
		if (this.getDomesticviolences() != null) {
			copy.getDomesticviolences().addAll(this.getDomesticviolences());
		}
		if (this.getEmployments() != null) {
			copy.getEmployments().addAll(this.getEmployments());
		}
		copy.setEntrydate(this.getEntrydate());
		if (this.getEntryrhsps() != null) {
			copy.getEntryrhsps().addAll(this.getEntryrhsps());
		}
		if (this.getEntryrhies() != null) {
			copy.getEntryrhies().addAll(this.getEntryrhies());
		}
		if (this.getEntryssvfs() != null) {
			copy.getEntryssvfs().addAll(this.getEntryssvfs());
		}
		if (this.getExits() != null) {
			copy.getExits().addAll(this.getExits());
		}
		copy.setExport(this.getExport());

		if (this.getHealthinsurances() != null) {
			copy.getHealthinsurances().addAll(this.getHealthinsurances());
		}
		if (this.getHealthStatuses() != null) {
			copy.getHealthStatuses().addAll(this.getHealthStatuses());
		}
		copy.setHouseholdid(this.getHouseholdid());
		copy.setId(this.getId());
		if (this.getIncomeandsourceses() != null) {
			copy.getIncomeandsourceses().addAll(this.getIncomeandsourceses());
		}

		if (this.getMedicalassistances() != null) {
			copy.getMedicalassistances().addAll(this.getMedicalassistances());
		}
		copy.setMonthshomelesspastthreeyears(this.getMonthshomelesspastthreeyears());
		if (this.getNoncashbenefitss() != null) {
			copy.getNoncashbenefitss().addAll(this.getNoncashbenefitss());
		}
		copy.setParentId(this.getParentId());
		if (this.getPathStatuses() != null) {
			copy.getPathStatuses().addAll(this.getPathStatuses());
		}
		copy.setProject(this.getProject());
		copy.setProjectGroupCode(this.getProjectGroupCode());
		copy.setRelationshiptohoh(this.getRelationshiptohoh());
		if (this.getMoveinDates() != null) {
			copy.getMoveinDates().addAll(this.getMoveinDates());
		}
		if (this.getRhybcpStatuses() != null) {
			copy.getRhybcpStatuses().addAll(this.getRhybcpStatuses());
		}
		if (this.getServiceFaReferrals() != null) {
			copy.getServiceFaReferrals().addAll(this.getServiceFaReferrals());
		}
		copy.setSync(this.isSync());
		copy.setTimeshomelesspastthreeyears(this.getTimeshomelesspastthreeyears());
		copy.setUserId(this.getUserId());
		copy.setVersion(this.getVersion());
		return copy;
	}



	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();

		sb.append("datetostreetessh: " + this.getDatetostreetessh() + ", ");
		sb.append("dateCreated: " + this.getDateCreated() + ", ");
		sb.append("dateCreatedFromSource: " + this.getDateCreatedFromSource() + ", ");
		sb.append("dateUpdated: " + this.getDateUpdated() + ", ");
		sb.append("dateUpdatedFromSource: " + this.getDateUpdatedFromSource() + ", ");
		sb.append("deleted: " + this.isDeleted() + ", ");
		sb.append("disablingcondition: " + this.getDisablingcondition() + ", ");
		sb.append("entrydate: " + this.getEntrydate() + ", ");
		sb.append("householdid: " + this.getHouseholdid() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("monthshomelesspastthreeyears: " + this.getMonthshomelesspastthreeyears() + ", ");
		sb.append("parentId: " + this.getParentId() + ", ");
		sb.append("projectGroupCode: " + this.getProjectGroupCode() + ", ");
		sb.append("relationshiptohoh: " + this.getRelationshiptohoh() + ", ");
		sb.append("sync: " + this.isSync() + ", ");
		sb.append("timeshomelesspastthreeyears: " + this.getTimeshomelesspastthreeyears() + ", ");
		sb.append("userId: " + this.getUserId() + ", ");
		sb.append("version: " + this.getVersion() + ", ");
		return sb.toString();
	}

	@Type(type = "com.servinglynk.hmis.warehouse.enums.EnrollmentDisablingconditionEnumType")
	@Basic( optional = true )
	@Column
	public EnrollmentDisablingconditionEnum getDisablingcondition() {
		return disablingcondition;
	}

	public void setDisablingcondition(
			EnrollmentDisablingconditionEnum disablingcondition) {
		this.disablingcondition = disablingcondition;
	}

	/** Equals implementation.
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;

		if ( this == aThat ) {
			 return true;
		}


		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation();
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}

		final Enrollment that;
		try {
			that = (Enrollment) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}


		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getClient() == null) && (that.getClient() == null)) || (getClient() != null && getClient().getId().equals(that.getClient().getId())));
		result = result && (((getDatetostreetessh() == null) && (that.getDatetostreetessh() == null)) || (getDatetostreetessh() != null && getDatetostreetessh().equals(that.getDatetostreetessh())));
		result = result && (((getDateCreated() == null) && (that.getDateCreated() == null)) || (getDateCreated() != null && getDateCreated().equals(that.getDateCreated())));
		result = result && (((getDateCreatedFromSource() == null) && (that.getDateCreatedFromSource() == null)) || (getDateCreatedFromSource() != null && getDateCreatedFromSource().equals(that.getDateCreatedFromSource())));
		result = result && (((getDateUpdated() == null) && (that.getDateUpdated() == null)) || (getDateUpdated() != null && getDateUpdated().equals(that.getDateUpdated())));
		result = result && (((getDateUpdatedFromSource() == null) && (that.getDateUpdatedFromSource() == null)) || (getDateUpdatedFromSource() != null && getDateUpdatedFromSource().equals(that.getDateUpdatedFromSource())));
		result = result && (((getDisablingcondition() == null) && (that.getDisablingcondition() == null)) || (getDisablingcondition() != null && getDisablingcondition().equals(that.getDisablingcondition())));
		result = result && (((getEntrydate() == null) && (that.getEntrydate() == null)) || (getEntrydate() != null && getEntrydate().equals(that.getEntrydate())));
		result = result && (((getExport() == null) && (that.getExport() == null)) || (getExport() != null && getExport().getId().equals(that.getExport().getId())));
		result = result && (((getHouseholdid() == null) && (that.getHouseholdid() == null)) || (getHouseholdid() != null && getHouseholdid().equals(that.getHouseholdid())));
		result = result && (((getMonthshomelesspastthreeyears() == null) && (that.getMonthshomelesspastthreeyears() == null)) || (getMonthshomelesspastthreeyears() != null && getMonthshomelesspastthreeyears().equals(that.getMonthshomelesspastthreeyears())));
		result = result && (((getParentId() == null) && (that.getParentId() == null)) || (getParentId() != null && getParentId().equals(that.getParentId())));
		result = result && (((getProject() == null) && (that.getProject() == null)) || (getProject() != null && getProject().getId().equals(that.getProject().getId())));
		result = result && (((getProjectGroupCode() == null) && (that.getProjectGroupCode() == null)) || (getProjectGroupCode() != null && getProjectGroupCode().equals(that.getProjectGroupCode())));
		result = result && (((getRelationshiptohoh() == null) && (that.getRelationshiptohoh() == null)) || (getRelationshiptohoh() != null && getRelationshiptohoh().equals(that.getRelationshiptohoh())));
		result = result && (((getTimeshomelesspastthreeyears() == null) && (that.getTimeshomelesspastthreeyears() == null)) || (getTimeshomelesspastthreeyears() != null && getTimeshomelesspastthreeyears().equals(that.getTimeshomelesspastthreeyears())));
		result = result && (((getUserId() == null) && (that.getUserId() == null)) || (getUserId() != null && getUserId().equals(that.getUserId())));
		result = result && (((getVersion() == null) && (that.getVersion() == null)) || (getVersion() != null && getVersion().equals(that.getVersion())));
		return result;
	}

	



}
