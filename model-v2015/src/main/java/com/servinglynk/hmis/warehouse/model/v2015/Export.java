package com.servinglynk.hmis.warehouse.model.v2015;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.WeakHashMap;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Type;
import org.hibernate.proxy.HibernateProxy;

import com.servinglynk.hmis.warehouse.model.base.BulkUpload;
import com.servinglynk.hmis.warehouse.model.v2015.Organization;



/**
 * Object mapping for hibernate-handled table: export.
 *
 *
 * @author autogenerated
 */


@Entity(name = "export_v2015")
@Table(name = "export", catalog = "hmis", schema = "v2015")
public class Export extends HmisBaseModel implements Cloneable, Serializable {

	/** Serial Version UID. */
	private static final long serialVersionUID = 42126664696688958L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, java.util.UUID> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, java.util.UUID>());

	/** hashCode temporary storage. */
	private volatile java.util.UUID hashCode;

	/** Field mapping. */
	private Set<EnrollmentCoc> enrollmentCocs = new HashSet<EnrollmentCoc>();

	/** Field mapping. */
	private Set<Affiliation> affiliations = new HashSet<Affiliation>();

	/** Field mapping. */
	private Set<BulkUpload> bulkUploads = new HashSet<BulkUpload>();

	/** Field mapping. */
	private Set<Client> clients = new HashSet<Client>();

	/** Field mapping. */
	private Set<ClientVeteranInfo> clientVeteranInfoes = new HashSet<ClientVeteranInfo>();

	/** Field mapping. */
	private Set<Coc> cocs = new HashSet<Coc>();

	/** Field mapping. */
	private Set<Contact> contacts = new HashSet<Contact>();

	/** Field mapping. */
	private Set<Dateofengagement> dateofengagements = new HashSet<Dateofengagement>();

	/** Field mapping. */
	private Set<Disabilities> disabilitieses = new HashSet<Disabilities>();

	/** Field mapping. */
	private Set<Domesticviolence> domesticviolences = new HashSet<Domesticviolence>();

	/** Field mapping. */
	private Set<Employment> employments = new HashSet<Employment>();

	/** Field mapping. */
	private LocalDateTime endDate;
	/** Field mapping. */
	private Set<Enrollment> enrollments = new HashSet<Enrollment>();

	/** Field mapping. */
	private Set<Entryrhsp> entryrhsps = new HashSet<Entryrhsp>();

	/** Field mapping. */
	private Set<Entryrhy> entryrhies = new HashSet<Entryrhy>();

	/** Field mapping. */
	private Set<Entryssvf> entryssvfs = new HashSet<Entryssvf>();

	/** Field mapping. */
	private Set<Exit> exits = new HashSet<Exit>();

	/** Field mapping. */
	private Set<Exithousingassessment> exithousingassessments = new HashSet<Exithousingassessment>();

	/** Field mapping. */
	private Set<Exitpath> exitpaths = new HashSet<Exitpath>();

	/** Field mapping. */
	private Set<Exitrhy> exitrhies = new HashSet<Exitrhy>();
	/** Field mapping. */
	private Set<Education> educations = new HashSet<Education>();
	/** Field mapping. */
	private String exportdirective;
	/** Field mapping. */
	private String exportperiodtype;
	/** Field mapping. */
	private LocalDateTime exportDate;
	/** Field mapping. */
	private java.util.UUID exportId;
	/** Field mapping. */
	private Set<Funder> funders = new HashSet<Funder>();

	/** Field mapping. */
	private Set<Healthinsurance> healthinsurances = new HashSet<Healthinsurance>();

	/** Field mapping. */
	private Set<HealthStatus> healthStatuses = new HashSet<HealthStatus>();

	/** Field mapping. */
	private Set<Housingassessmentdisposition> housingassessmentdispositions = new HashSet<Housingassessmentdisposition>();

	/** Field mapping. */
	private java.util.UUID id;
	/** Field mapping. */
	private Set<Incomeandsources> incomeandsourceses = new HashSet<Incomeandsources>();

	/** Field mapping. */
	private Set<Inventory> inventories = new HashSet<Inventory>();

	/** Field mapping. */
	private Set<Medicalassistance> medicalassistances = new HashSet<Medicalassistance>();

	/** Field mapping. */
	private Set<Noncashbenefits> noncashbenefitss = new HashSet<Noncashbenefits>();

	/** Field mapping. */
	private Set<Organization> organizations = new HashSet<Organization>();

	/** Field mapping. */
	//private java.util.UUID parentId;
	/** Field mapping. */
	private Set<Pathstatus> pathStatuses = new HashSet<Pathstatus>();

	/** Field mapping. */
	private Set<Project> projects = new HashSet<Project>();

	/** Field mapping. */
	private Set<Residentialmoveindate> residentialmoveindates = new HashSet<Residentialmoveindate>();

	/** Field mapping. */
	private Set<RhybcpStatus> rhybcpStatuses = new HashSet<RhybcpStatus>();

	/** Field mapping. */
	private Set<ServiceFaReferral> serviceFaReferrals = new HashSet<ServiceFaReferral>();

	/** Field mapping. */
	private Set<Site> sites = new HashSet<Site>();

	/** Field mapping. */
	private Source source;
	/** Field mapping. */
	private LocalDateTime startDate;
	/** Field mapping. */
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Export() {
		// Default constructor
	}

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Export(java.util.UUID id) {
		this.id = id;
	}





	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Export.class;
	}


	 /**
	 * Return the value associated with the column: affiliation.
	 * @return A Set&lt;Affiliation&gt; object (this.affiliation)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Affiliation> getAffiliations() {
		return this.affiliations;

	}

	/**
	 * Adds a bi-directional link of type Affiliation to the affiliations set.
	 * @param affiliation item to add
	 */
	public void addAffiliation(Affiliation affiliation) {
		affiliation.setExport(this);
		this.affiliations.add(affiliation);
	}


	 /**
	 * Set the value related to the column: affiliation.
	 * @param affiliation the affiliation value you wish to set
	 */
	public void setAffiliations(final Set<Affiliation> affiliation) {
		this.affiliations = affiliation;
	}

	 /**
	 * Return the value associated with the column: bulkUpload.
	 * @return A Set&lt;BulkUpload&gt; object (this.bulkUpload)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "exportId"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<BulkUpload> getBulkUploads() {
		return this.bulkUploads;

	}

	/**
	 * Adds a bi-directional link of type BulkUpload to the bulkUploads set.
	 * @param bulkUpload item to add
	 */
	public void addBulkUpload(BulkUpload bulkUpload) {
		this.bulkUploads.add(bulkUpload);
	}


	 /**
	 * Set the value related to the column: bulkUpload.
	 * @param bulkUpload the bulkUpload value you wish to set
	 */
	public void setBulkUploads(final Set<BulkUpload> bulkUpload) {
		this.bulkUploads = bulkUpload;
	}

	 /**
	 * Return the value associated with the column: client.
	 * @return A Set&lt;Client&gt; object (this.client)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
 	@Column(nullable = true )
	public Set<Client> getClients() {
		return this.clients;

	}

	/**
	 * Adds a bi-directional link of type Client to the clients set.
	 * @param client item to add
	 */
	public void addClient(Client client) {
		client.setExport(this);
		this.clients.add(client);
	}


	 /**
	 * Set the value related to the column: client.
	 * @param client the client value you wish to set
	 */
	public void setClients(final Set<Client> client) {
		this.clients = client;
	}

	 /**
	 * Return the value associated with the column: clientVeteranInfo.
	 * @return A Set&lt;ClientVeteranInfo&gt; object (this.clientVeteranInfo)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<ClientVeteranInfo> getClientVeteranInfoes() {
		return this.clientVeteranInfoes;

	}

	/**
	 * Adds a bi-directional link of type ClientVeteranInfo to the clientVeteranInfoes set.
	 * @param clientVeteranInfo item to add
	 */
	public void addClientVeteranInfo(ClientVeteranInfo clientVeteranInfo) {
		clientVeteranInfo.setExport(this);
		this.clientVeteranInfoes.add(clientVeteranInfo);
	}


	 /**
	 * Set the value related to the column: clientVeteranInfo.
	 * @param clientVeteranInfo the clientVeteranInfo value you wish to set
	 */
	public void setClientVeteranInfoes(final Set<ClientVeteranInfo> clientVeteranInfo) {
		this.clientVeteranInfoes = clientVeteranInfo;
	}

	 /**
	 * Return the value associated with the column: coc.
	 * @return A Set&lt;Coc&gt; object (this.coc)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Coc> getCocs() {
		return this.cocs;

	}

	/**
	 * Adds a bi-directional link of type Coc to the cocs set.
	 * @param coc item to add
	 */
	public void addCoc(Coc coc) {
		coc.setExport(this);
		this.cocs.add(coc);
	}


	 /**
	 * Set the value related to the column: coc.
	 * @param coc the coc value you wish to set
	 */
	public void setCocs(final Set<Coc> coc) {
		this.cocs = coc;
	}


	 /**
	 * Return the value associated with the column: contact.
	 * @return A Set&lt;Contact&gt; object (this.contact)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Contact> getContacts() {
		return this.contacts;

	}

	/**
	 * Adds a bi-directional link of type Contact to the contacts set.
	 * @param contact item to add
	 */
	public void addContact(Contact contact) {
		contact.setExport(this);
		this.contacts.add(contact);
	}


	 /**
	 * Set the value related to the column: contact.
	 * @param contact the contact value you wish to set
	 */
	public void setContacts(final Set<Contact> contact) {
		this.contacts = contact;
	}

	 /**
	 * Return the value associated with the column: dateofengagement.
	 * @return A Set&lt;Dateofengagement&gt; object (this.dateofengagement)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Dateofengagement> getDateofengagements() {
		return this.dateofengagements;

	}

	/**
	 * Adds a bi-directional link of type Dateofengagement to the dateofengagements set.
	 * @param dateofengagement item to add
	 */
	public void addDateofengagement(Dateofengagement dateofengagement) {
		dateofengagement.setExport(this);
		this.dateofengagements.add(dateofengagement);
	}


	 /**
	 * Set the value related to the column: dateofengagement.
	 * @param dateofengagement the dateofengagement value you wish to set
	 */
	public void setDateofengagements(final Set<Dateofengagement> dateofengagement) {
		this.dateofengagements = dateofengagement;
	}


	 /**
	 * Return the value associated with the column: disabilities.
	 * @return A Set&lt;Disabilities&gt; object (this.disabilities)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Disabilities> getDisabilitieses() {
		return this.disabilitieses;

	}

	/**
	 * Adds a bi-directional link of type Disabilities to the disabilitieses set.
	 * @param disabilities item to add
	 */
	public void addDisabilities(Disabilities disabilities) {
		disabilities.setExport(this);
		this.disabilitieses.add(disabilities);
	}


	 /**
	 * Set the value related to the column: disabilities.
	 * @param disabilities the disabilities value you wish to set
	 */
	public void setDisabilitieses(final Set<Disabilities> disabilities) {
		this.disabilitieses = disabilities;
	}

	 /**
	 * Return the value associated with the column: domesticviolence.
	 * @return A Set&lt;Domesticviolence&gt; object (this.domesticviolence)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Domesticviolence> getDomesticviolences() {
		return this.domesticviolences;

	}

	/**
	 * Adds a bi-directional link of type Domesticviolence to the domesticviolences set.
	 * @param domesticviolence item to add
	 */
	public void addDomesticviolence(Domesticviolence domesticviolence) {
		domesticviolence.setExport(this);
		this.domesticviolences.add(domesticviolence);
	}


	 /**
	 * Set the value related to the column: domesticviolence.
	 * @param domesticviolence the domesticviolence value you wish to set
	 */
	public void setDomesticviolences(final Set<Domesticviolence> domesticviolence) {
		this.domesticviolences = domesticviolence;
	}

	 /**
	 * Return the value associated with the column: employment.
	 * @return A Set&lt;Employment&gt; object (this.employment)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Employment> getEmployments() {
		return this.employments;

	}

	/**
	 * Adds a bi-directional link of type Employment to the employments set.
	 * @param employment item to add
	 */
	public void addEmployment(Employment employment) {
		employment.setExport(this);
		this.employments.add(employment);
	}


	 /**
	 * Set the value related to the column: employment.
	 * @param employment the employment value you wish to set
	 */
	public void setEmployments(final Set<Employment> employment) {
		this.employments = employment;
	}

	 /**
	 * Return the value associated with the column: endDate.
	 * @return A LocalDateTime object (this.endDate)
	 */
	@Type(type="org.jadira.usertype.dateandtime.threeten.PersistentLocalDateTime")
	@Basic( optional = true )
	@Column( name = "end_date"  )
	public LocalDateTime getEndDate() {
		return this.endDate;

	}



	 /**
	 * Set the value related to the column: endDate.
	 * @param endDate the endDate value you wish to set
	 */
	public void setEndDate(final LocalDateTime endDate) {
		this.endDate = endDate;
	}

	 /**
	 * Return the value associated with the column: enrollment.
	 * @return A Set&lt;Enrollment&gt; object (this.enrollment)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Enrollment> getEnrollments() {
		return this.enrollments;

	}

	/**
	 * Adds a bi-directional link of type Enrollment to the enrollments set.
	 * @param enrollment item to add
	 */
	public void addEnrollment(Enrollment enrollment) {
		enrollment.setExport(this);
		this.enrollments.add(enrollment);
	}


	 /**
	 * Set the value related to the column: enrollment.
	 * @param enrollment the enrollment value you wish to set
	 */
	public void setEnrollments(final Set<Enrollment> enrollment) {
		this.enrollments = enrollment;
	}

	 /**
	 * Return the value associated with the column: entryrhsp.
	 * @return A Set&lt;Entryrhsp&gt; object (this.entryrhsp)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Entryrhsp> getEntryrhsps() {
		return this.entryrhsps;

	}

	/**
	 * Adds a bi-directional link of type Entryrhsp to the entryrhsps set.
	 * @param entryrhsp item to add
	 */
	public void addEntryrhsp(Entryrhsp entryrhsp) {
		entryrhsp.setExport(this);
		this.entryrhsps.add(entryrhsp);
	}


	 /**
	 * Set the value related to the column: entryrhsp.
	 * @param entryrhsp the entryrhsp value you wish to set
	 */
	public void setEntryrhsps(final Set<Entryrhsp> entryrhsp) {
		this.entryrhsps = entryrhsp;
	}

	 /**
	 * Return the value associated with the column: entryrhy.
	 * @return A Set&lt;Entryrhy&gt; object (this.entryrhy)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Entryrhy> getEntryrhies() {
		return this.entryrhies;

	}

	/**
	 * Adds a bi-directional link of type Entryrhy to the entryrhies set.
	 * @param entryrhy item to add
	 */
	public void addEntryrhy(Entryrhy entryrhy) {
		entryrhy.setExport(this);
		this.entryrhies.add(entryrhy);
	}


	 /**
	 * Set the value related to the column: entryrhy.
	 * @param entryrhy the entryrhy value you wish to set
	 */
	public void setEntryrhies(final Set<Entryrhy> entryrhy) {
		this.entryrhies = entryrhy;
	}

	 /**
	 * Return the value associated with the column: entryssvf.
	 * @return A Set&lt;Entryssvf&gt; object (this.entryssvf)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Entryssvf> getEntryssvfs() {
		return this.entryssvfs;

	}

	/**
	 * Adds a bi-directional link of type Entryssvf to the entryssvfs set.
	 * @param entryssvf item to add
	 */
	public void addEntryssvf(Entryssvf entryssvf) {
		entryssvf.setExport(this);
		this.entryssvfs.add(entryssvf);
	}


	 /**
	 * Set the value related to the column: entryssvf.
	 * @param entryssvf the entryssvf value you wish to set
	 */
	public void setEntryssvfs(final Set<Entryssvf> entryssvf) {
		this.entryssvfs = entryssvf;
	}

	 /**
	 * Return the value associated with the column: exit.
	 * @return A Set&lt;Exit&gt; object (this.exit)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Exit> getExits() {
		return this.exits;

	}

	/**
	 * Adds a bi-directional link of type Exit to the exits set.
	 * @param exit item to add
	 */
	public void addExit(Exit exit) {
		exit.setExport(this);
		this.exits.add(exit);
	}


	 /**
	 * Set the value related to the column: exit.
	 * @param exit the exit value you wish to set
	 */
	public void setExits(final Set<Exit> exit) {
		this.exits = exit;
	}

	 /**
	 * Return the value associated with the column: exithousingassessment.
	 * @return A Set&lt;Exithousingassessment&gt; object (this.exithousingassessment)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Exithousingassessment> getExithousingassessments() {
		return this.exithousingassessments;

	}

	/**
	 * Adds a bi-directional link of type Exithousingassessment to the exithousingassessments set.
	 * @param exithousingassessment item to add
	 */
	public void addExithousingassessment(Exithousingassessment exithousingassessment) {
		exithousingassessment.setExport(this);
		this.exithousingassessments.add(exithousingassessment);
	}


	 /**
	 * Set the value related to the column: exithousingassessment.
	 * @param exithousingassessment the exithousingassessment value you wish to set
	 */
	public void setExithousingassessments(final Set<Exithousingassessment> exithousingassessment) {
		this.exithousingassessments = exithousingassessment;
	}

	 /**
	 * Return the value associated with the column: exitpath.
	 * @return A Set&lt;Exitpath&gt; object (this.exitpath)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Exitpath> getExitpaths() {
		return this.exitpaths;

	}

	/**
	 * Adds a bi-directional link of type Exitpath to the exitpaths set.
	 * @param exitpath item to add
	 */
	public void addExitpath(Exitpath exitpath) {
		exitpath.setExport(this);
		this.exitpaths.add(exitpath);
	}


	 /**
	 * Set the value related to the column: exitpath.
	 * @param exitpath the exitpath value you wish to set
	 */
	public void setExitpaths(final Set<Exitpath> exitpath) {
		this.exitpaths = exitpath;
	}

	 /**
	 * Return the value associated with the column: exitrhy.
	 * @return A Set&lt;Exitrhy&gt; object (this.exitrhy)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Exitrhy> getExitrhies() {
		return this.exitrhies;

	}

	/**
	 * Adds a bi-directional link of type Exitrhy to the exitrhies set.
	 * @param exitrhy item to add
	 */
	public void addExitrhy(Exitrhy exitrhy) {
		exitrhy.setExport(this);
		this.exitrhies.add(exitrhy);
	}


	 /**
	 * Set the value related to the column: exitrhy.
	 * @param exitrhy the exitrhy value you wish to set
	 */
	public void setExitrhies(final Set<Exitrhy> exitrhy) {
		this.exitrhies = exitrhy;
	}

	 /**
	 * Return the value associated with the column: exportdirective.
	 * @return A String object (this.exportdirective)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getExportdirective() {
		return this.exportdirective;

	}



	 /**
	 * Set the value related to the column: exportdirective.
	 * @param exportdirective the exportdirective value you wish to set
	 */
	public void setExportdirective(final String exportdirective) {
		this.exportdirective = exportdirective;
	}

	 /**
	 * Return the value associated with the column: exportperiodtype.
	 * @return A String object (this.exportperiodtype)
	 */
	@Basic( optional = true )
	@Column( length = 2147483647  )
	public String getExportperiodtype() {
		return this.exportperiodtype;

	}



	 /**
	 * Set the value related to the column: exportperiodtype.
	 * @param exportperiodtype the exportperiodtype value you wish to set
	 */
	public void setExportperiodtype(final String exportperiodtype) {
		this.exportperiodtype = exportperiodtype;
	}

	 /**
	 * Return the value associated with the column: exportDate.
	 * @return A LocalDateTime object (this.exportDate)
	 */
	@Type(type="org.jadira.usertype.dateandtime.threeten.PersistentLocalDateTime")
	@Basic( optional = true )
	@Column( name = "export_date"  )
	public LocalDateTime getExportDate() {
		return this.exportDate;

	}



	 /**
	 * Set the value related to the column: exportDate.
	 * @param exportDate the exportDate value you wish to set
	 */
	public void setExportDate(final LocalDateTime exportDate) {
		this.exportDate = exportDate;
	}

	 /**
	 * Return the value associated with the column: exportId.
	 * @return A java.util.UUID object (this.exportId)
	 */
	@Basic( optional = true )
	@Column( name = "export_id"  ) @org.hibernate.annotations.Type(type="pg-uuid")
	public java.util.UUID getExportId() {
		return this.exportId;

	}



	 /**
	 * Set the value related to the column: exportId.
	 * @param exportId the exportId value you wish to set
	 */
	public void setExportId(final java.util.UUID exportId) {
		this.exportId = exportId;
	}

	 /**
	 * Return the value associated with the column: funder.
	 * @return A Set&lt;Funder&gt; object (this.funder)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Funder> getFunders() {
		return this.funders;

	}

	/**
	 * Adds a bi-directional link of type Funder to the funders set.
	 * @param funder item to add
	 */
	public void addFunder(Funder funder) {
		funder.setExport(this);
		this.funders.add(funder);
	}


	 /**
	 * Set the value related to the column: funder.
	 * @param funder the funder value you wish to set
	 */
	public void setFunders(final Set<Funder> funder) {
		this.funders = funder;
	}

	 /**
	 * Return the value associated with the column: healthinsurance.
	 * @return A Set&lt;Healthinsurance&gt; object (this.healthinsurance)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Healthinsurance> getHealthinsurances() {
		return this.healthinsurances;

	}

	/**
	 * Adds a bi-directional link of type Healthinsurance to the healthinsurances set.
	 * @param healthinsurance item to add
	 */
	public void addHealthinsurance(Healthinsurance healthinsurance) {
		healthinsurance.setExport(this);
		this.healthinsurances.add(healthinsurance);
	}


	 /**
	 * Set the value related to the column: healthinsurance.
	 * @param healthinsurance the healthinsurance value you wish to set
	 */
	public void setHealthinsurances(final Set<Healthinsurance> healthinsurance) {
		this.healthinsurances = healthinsurance;
	}

	 /**
	 * Return the value associated with the column: healthStatus.
	 * @return A Set&lt;HealthStatus&gt; object (this.healthStatus)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<HealthStatus> getHealthStatuses() {
		return this.healthStatuses;

	}

	/**
	 * Adds a bi-directional link of type HealthStatus to the healthStatuses set.
	 * @param healthStatus item to add
	 */
	public void addHealthStatus(HealthStatus healthStatus) {
		healthStatus.setExport(this);
		this.healthStatuses.add(healthStatus);
	}


	 /**
	 * Set the value related to the column: healthStatus.
	 * @param healthStatus the healthStatus value you wish to set
	 */
	public void setHealthStatuses(final Set<HealthStatus> healthStatus) {
		this.healthStatuses = healthStatus;
	}

	 /**
	 * Return the value associated with the column: housingassessmentdisposition.
	 * @return A Set&lt;Housingassessmentdisposition&gt; object (this.housingassessmentdisposition)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Housingassessmentdisposition> getHousingassessmentdispositions() {
		return this.housingassessmentdispositions;

	}

	/**
	 * Adds a bi-directional link of type Housingassessmentdisposition to the housingassessmentdispositions set.
	 * @param housingassessmentdisposition item to add
	 */
	public void addHousingassessmentdisposition(Housingassessmentdisposition housingassessmentdisposition) {
		housingassessmentdisposition.setExport(this);
		this.housingassessmentdispositions.add(housingassessmentdisposition);
	}


	 /**
	 * Set the value related to the column: housingassessmentdisposition.
	 * @param housingassessmentdisposition the housingassessmentdisposition value you wish to set
	 */
	public void setHousingassessmentdispositions(final Set<Housingassessmentdisposition> housingassessmentdisposition) {
		this.housingassessmentdispositions = housingassessmentdisposition;
	}

	 /**
	 * Return the value associated with the column: id.
	 * @return A java.util.UUID object (this.id)
	 */
	@Id
	 @Basic( optional = false )
   @Column( name = "id", nullable = false  ) @org.hibernate.annotations.Type(type="org.hibernate.type.PostgresUUIDType")
	public java.util.UUID getId() {
		return this.id;

	}



	 /**
	 * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final java.util.UUID id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

	 /**
	 * Return the value associated with the column: incomeandsources.
	 * @return A Set&lt;Incomeandsources&gt; object (this.incomeandsources)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Incomeandsources> getIncomeandsourceses() {
		return this.incomeandsourceses;

	}

	/**
	 * Adds a bi-directional link of type Incomeandsources to the incomeandsourceses set.
	 * @param incomeandsources item to add
	 */
	public void addIncomeandsources(Incomeandsources incomeandsources) {
		incomeandsources.setExport(this);
		this.incomeandsourceses.add(incomeandsources);
	}


	 /**
	 * Set the value related to the column: incomeandsources.
	 * @param incomeandsources the incomeandsources value you wish to set
	 */
	public void setIncomeandsourceses(final Set<Incomeandsources> incomeandsources) {
		this.incomeandsourceses = incomeandsources;
	}

	 /**
	 * Return the value associated with the column: inventory.
	 * @return A Set&lt;Inventory&gt; object (this.inventory)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Inventory> getInventories() {
		return this.inventories;

	}

	/**
	 * Adds a bi-directional link of type Inventory to the inventories set.
	 * @param inventory item to add
	 */
	public void addInventory(Inventory inventory) {
		inventory.setExport(this);
		this.inventories.add(inventory);
	}


	 /**
	 * Set the value related to the column: inventory.
	 * @param inventory the inventory value you wish to set
	 */
	public void setInventories(final Set<Inventory> inventory) {
		this.inventories = inventory;
	}
	 /**
	 * Return the value associated with the column: medicalassistance.
	 * @return A Set&lt;Medicalassistance&gt; object (this.medicalassistance)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Medicalassistance> getMedicalassistances() {
		return this.medicalassistances;

	}

	/**
	 * Adds a bi-directional link of type Medicalassistance to the medicalassistances set.
	 * @param medicalassistance item to add
	 */
	public void addMedicalassistance(Medicalassistance medicalassistance) {
		medicalassistance.setExport(this);
		this.medicalassistances.add(medicalassistance);
	}


	 /**
	 * Set the value related to the column: medicalassistance.
	 * @param medicalassistance the medicalassistance value you wish to set
	 */
	public void setMedicalassistances(final Set<Medicalassistance> medicalassistance) {
		this.medicalassistances = medicalassistance;
	}

	 /**
	 * Return the value associated with the column: noncashbenefits.
	 * @return A Set&lt;Noncashbenefits&gt; object (this.noncashbenefits)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Noncashbenefits> getNoncashbenefitss() {
		return this.noncashbenefitss;

	}

	/**
	 * Adds a bi-directional link of type Noncashbenefits to the noncashbenefitss set.
	 * @param noncashbenefits item to add
	 */
	public void addNoncashbenefits(Noncashbenefits noncashbenefits) {
		noncashbenefits.setExport(this);
		this.noncashbenefitss.add(noncashbenefits);
	}


	 /**
	 * Set the value related to the column: noncashbenefits.
	 * @param noncashbenefits the noncashbenefits value you wish to set
	 */
	public void setNoncashbenefitss(final Set<Noncashbenefits> noncashbenefits) {
		this.noncashbenefitss = noncashbenefits;
	}

	/* *//**
	 * Return the value associated with the column: organization.
	 * @return A Set&lt;Organization&gt; object (this.organization)
	 *//*
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Organization> getOrganizations() {
		return this.organizations;

	}

	*//**
	 * Adds a bi-directional link of type Organization to the organizations set.
	 * @param organization item to add
	 *//*
	public void addOrganization(Organization organization) {
//		organization.setExport(this);
		this.organizations.add(organization);
	}


	 *//**
	 * Set the value related to the column: organization.
	 * @param organization the organization value you wish to set
	 *//*
	public void setOrganizations(final Set<Organization> organization) {
		this.organizations = organization;
	}*/

/*	 *//**
	 * Return the value associated with the column: parentId.
	 * @return A java.util.UUID object (this.parentId)
	 *//*
	@Basic( optional = true )
	@Column( name = "parent_id"  ) @org.hibernate.annotations.Type(type="pg-uuid")
	public java.util.UUID getParentId() {
		return this.parentId;

	}



	 *//**
	 * Set the value related to the column: parentId.
	 * @param parentId the parentId value you wish to set
	 *//*
	public void setParentId(final java.util.UUID parentId) {
		this.parentId = parentId;
	}
*/
	 /**
	 * Return the value associated with the column: pathStatus.
	 * @return A Set&lt;PathStatus&gt; object (this.pathStatus)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Pathstatus> getPathStatuses() {
		return this.pathStatuses;

	}

	/**
	 * Adds a bi-directional link of type PathStatus to the pathStatuses set.
	 * @param pathStatus item to add
	 */
	public void addPathStatus(Pathstatus pathStatus) {
		pathStatus.setExport(this);
		this.pathStatuses.add(pathStatus);
	}


	 /**
	 * Set the value related to the column: pathStatus.
	 * @param pathStatus the pathStatus value you wish to set
	 */
	public void setPathStatuses(final Set<Pathstatus> pathStatus) {
		this.pathStatuses = pathStatus;
	}


	 /**
	 * Return the value associated with the column: project.
	 * @return A Set&lt;Project&gt; object (this.project)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Project> getProjects() {
		return this.projects;

	}

	/**
	 * Adds a bi-directional link of type Project to the projects set.
	 * @param project item to add
	 */
	public void addProject(Project project) {
		project.setExport(this);
		this.projects.add(project);
	}


	 /**
	 * Set the value related to the column: project.
	 * @param project the project value you wish to set
	 */
	public void setProjects(final Set<Project> project) {
		this.projects = project;
	}

	 /**
	 * Return the value associated with the column: residentialmoveindate.
	 * @return A Set&lt;Residentialmoveindate&gt; object (this.residentialmoveindate)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Residentialmoveindate> getResidentialmoveindates() {
		return this.residentialmoveindates;

	}

	/**
	 * Adds a bi-directional link of type Residentialmoveindate to the residentialmoveindates set.
	 * @param residentialmoveindate item to add
	 */
	public void addResidentialmoveindate(Residentialmoveindate residentialmoveindate) {
		residentialmoveindate.setExport(this);
		this.residentialmoveindates.add(residentialmoveindate);
	}


	 /**
	 * Set the value related to the column: residentialmoveindate.
	 * @param residentialmoveindate the residentialmoveindate value you wish to set
	 */
	public void setResidentialmoveindates(final Set<Residentialmoveindate> residentialmoveindate) {
		this.residentialmoveindates = residentialmoveindate;
	}

	 /**
	 * Return the value associated with the column: rhybcpStatus.
	 * @return A Set&lt;RhybcpStatus&gt; object (this.rhybcpStatus)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<RhybcpStatus> getRhybcpStatuses() {
		return this.rhybcpStatuses;

	}

	/**
	 * Adds a bi-directional link of type RhybcpStatus to the rhybcpStatuses set.
	 * @param rhybcpStatus item to add
	 */
	public void addRhybcpStatus(RhybcpStatus rhybcpStatus) {
		rhybcpStatus.setExport(this);
		this.rhybcpStatuses.add(rhybcpStatus);
	}


	 /**
	 * Set the value related to the column: rhybcpStatus.
	 * @param rhybcpStatus the rhybcpStatus value you wish to set
	 */
	public void setRhybcpStatuses(final Set<RhybcpStatus> rhybcpStatus) {
		this.rhybcpStatuses = rhybcpStatus;
	}

	 /**
	 * Return the value associated with the column: serviceFaReferral.
	 * @return A Set&lt;ServiceFaReferral&gt; object (this.serviceFaReferral)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<ServiceFaReferral> getServiceFaReferrals() {
		return this.serviceFaReferrals;

	}

	/**
	 * Adds a bi-directional link of type ServiceFaReferral to the serviceFaReferrals set.
	 * @param serviceFaReferral item to add
	 */
	public void addServiceFaReferral(ServiceFaReferral serviceFaReferral) {
		serviceFaReferral.setExport(this);
		this.serviceFaReferrals.add(serviceFaReferral);
	}


	 /**
	 * Set the value related to the column: serviceFaReferral.
	 * @param serviceFaReferral the serviceFaReferral value you wish to set
	 */
	public void setServiceFaReferrals(final Set<ServiceFaReferral> serviceFaReferral) {
		this.serviceFaReferrals = serviceFaReferral;
	}
	 /**
	 * Return the value associated with the column: site.
	 * @return A Set&lt;Site&gt; object (this.site)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Site> getSites() {
		return this.sites;

	}

	/**
	 * Adds a bi-directional link of type Site to the sites set.
	 * @param site item to add
	 */
	public void addSite(Site site) {
		site.setExport(this);
		this.sites.add(site);
	}


	 /**
	 * Set the value related to the column: site.
	 * @param site the site value you wish to set
	 */
	public void setSites(final Set<Site> site) {
		this.sites = site;
	}

	 /**
	 * Return the value associated with the column: source.
	 * @return A Source object (this.source)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = true )
	@JoinColumn(name = "source_id", nullable = true )
	public Source getSource() {
		return this.source;

	}



	 /**
	 * Set the value related to the column: source.
	 * @param source the source value you wish to set
	 */
	public void setSource(final Source source) {
		this.source = source;
	}

	 /**
	 * Return the value associated with the column: startDate.
	 * @return A LocalDateTime object (this.startDate)
	 */
	@Type(type="org.jadira.usertype.dateandtime.threeten.PersistentLocalDateTime")
	@Basic( optional = true )
	@Column( name = "start_date"  )
	public LocalDateTime getStartDate() {
		return this.startDate;

	}



	 /**
	 * Set the value related to the column: startDate.
	 * @param startDate the startDate value you wish to set
	 */
	public void setStartDate(final LocalDateTime startDate) {
		this.startDate = startDate;
	}

	 /**
	 * Return the value associated with the column: enrollmentCoc.
	 * @return A Set&lt;EnrollmentCoc&gt; object (this.enrollmentCoc)
	 */
	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.ALL})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<EnrollmentCoc> getEnrollmentCocs() {
		return this.enrollmentCocs;

	}

	/**
	 * Adds a bi-directional link of type EnrollmentCoc to the enrollmentCocs set.
	 * @param enrollmentCoc item to add
	 */
	public void addEnrollmentCoc(EnrollmentCoc enrollmentCoc) {
		enrollmentCoc.setExport(this);
		this.enrollmentCocs.add(enrollmentCoc);
	}


	 /**
	 * Set the value related to the column: enrollmentCoc.
	 * @param enrollmentCoc the enrollmentCoc value you wish to set
	 */
	public void setEnrollmentCocs(final Set<EnrollmentCoc> enrollmentCoc) {
		this.enrollmentCocs = enrollmentCoc;
	}
	
	/**
	 * Return the value associated with the column: affiliation.
	 * @return A Set&lt;Affiliation&gt; object (this.affiliation)
	 */
	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<com.servinglynk.hmis.warehouse.model.v2015.Education> getEducations() {
		return this.educations;

	}
	/**
	 * Adds a bi-directional link of type Affiliation to the affiliations set.
	 * @param affiliation item to add
	 */
	public void addEducation(Education education) {
		education.setExport(this);
		this.educations.add(education);
	}


	 /**
	 * Set the value related to the column: affiliation.
	 * @param affiliation the affiliation value you wish to set
	 */
	public void setEducations(final Set<Education> education) {
		this.educations = education;
	}

	 /**
	 * Return the value associated with the column: organization.
	 * @return A Set&lt;Organization&gt; object (this.organization)
	 */
	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "export"  )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Organization> getOrganizations() {
		return this.organizations;

	}

	/**
	 * Adds a bi-directional link of type Organization to the organizations set.
	 * @param organization item to add
	 */
	public void addOrganization(Organization organization) {
		organization.setExport(this);
		this.organizations.add(organization);
	}


	 /**
	 * Set the value related to the column: organization.
	 * @param organization the organization value you wish to set
	 */
	public void setOrganizations(final Set<Organization> organization) {
		this.organizations = organization;
	}
				

				/** Field mapping. */

   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Export clone() throws CloneNotSupportedException {

        final Export copy = (Export)super.clone();

		if (this.getAffiliations() != null) {
			copy.getAffiliations().addAll(this.getAffiliations());
		}
		if (this.getBulkUploads() != null) {
			copy.getBulkUploads().addAll(this.getBulkUploads());
		}
	/*	if (this.getClients() != null) {
			copy.getClients().addAll(this.getClients());
		}*/
		if (this.getClientVeteranInfoes() != null) {
			copy.getClientVeteranInfoes().addAll(this.getClientVeteranInfoes());
		}
		if (this.getCocs() != null) {
			copy.getCocs().addAll(this.getCocs());
		}
		if (this.getContacts() != null) {
			copy.getContacts().addAll(this.getContacts());
		}
		if (this.getDateofengagements() != null) {
			copy.getDateofengagements().addAll(this.getDateofengagements());
		}
		copy.setDateCreated(this.getDateCreated());
		copy.setDateCreatedFromSource(this.getDateCreatedFromSource());
		copy.setDateUpdated(this.getDateUpdated());
		copy.setDateUpdatedFromSource(this.getDateUpdatedFromSource());
		copy.setDeleted(this.isDeleted());
		if (this.getDisabilitieses() != null) {
			copy.getDisabilitieses().addAll(this.getDisabilitieses());
		}
		if (this.getDomesticviolences() != null) {
			copy.getDomesticviolences().addAll(this.getDomesticviolences());
		}
		if (this.getEmployments() != null) {
			copy.getEmployments().addAll(this.getEmployments());
		}
		copy.setEndDate(this.getEndDate());
		if (this.getEnrollments() != null) {
			copy.getEnrollments().addAll(this.getEnrollments());
		}
		if (this.getEntryrhsps() != null) {
			copy.getEntryrhsps().addAll(this.getEntryrhsps());
		}
		if (this.getEntryrhies() != null) {
			copy.getEntryrhies().addAll(this.getEntryrhies());
		}
		if (this.getEntryssvfs() != null) {
			copy.getEntryssvfs().addAll(this.getEntryssvfs());
		}
		if (this.getExits() != null) {
			copy.getExits().addAll(this.getExits());
		}
		if (this.getExithousingassessments() != null) {
			copy.getExithousingassessments().addAll(this.getExithousingassessments());
		}
		if (this.getExitpaths() != null) {
			copy.getExitpaths().addAll(this.getExitpaths());
		}
		if (this.getExitrhies() != null) {
			copy.getExitrhies().addAll(this.getExitrhies());
		}
		copy.setExportdirective(this.getExportdirective());
		copy.setExportperiodtype(this.getExportperiodtype());
		copy.setExportDate(this.getExportDate());
		copy.setExportId(this.getExportId());
		if (this.getFunders() != null) {
			copy.getFunders().addAll(this.getFunders());
		}
		if (this.getHealthinsurances() != null) {
			copy.getHealthinsurances().addAll(this.getHealthinsurances());
		}
		if (this.getHealthStatuses() != null) {
			copy.getHealthStatuses().addAll(this.getHealthStatuses());
		}
		if (this.getHousingassessmentdispositions() != null) {
			copy.getHousingassessmentdispositions().addAll(this.getHousingassessmentdispositions());
		}
		copy.setId(this.getId());
		if (this.getIncomeandsourceses() != null) {
			copy.getIncomeandsourceses().addAll(this.getIncomeandsourceses());
		}
		if (this.getInventories() != null) {
			copy.getInventories().addAll(this.getInventories());
		}
		if (this.getMedicalassistances() != null) {
			copy.getMedicalassistances().addAll(this.getMedicalassistances());
		}
		if (this.getNoncashbenefitss() != null) {
			copy.getNoncashbenefitss().addAll(this.getNoncashbenefitss());
		}
	/*	if (this.getOrganizations() != null) {
			copy.getOrganizations().addAll(this.getOrganizations());
		}*/
		copy.setParentId(this.getParentId());
		if (this.getPathStatuses() != null) {
			copy.getPathStatuses().addAll(this.getPathStatuses());
		}
		if (this.getProjects() != null) {
			copy.getProjects().addAll(this.getProjects());
		}
		copy.setProjectGroupCode(this.getProjectGroupCode());
		if (this.getResidentialmoveindates() != null) {
			copy.getResidentialmoveindates().addAll(this.getResidentialmoveindates());
		}
		if (this.getRhybcpStatuses() != null) {
			copy.getRhybcpStatuses().addAll(this.getRhybcpStatuses());
		}
		if (this.getServiceFaReferrals() != null) {
			copy.getServiceFaReferrals().addAll(this.getServiceFaReferrals());
		}
		if (this.getSites() != null) {
			copy.getSites().addAll(this.getSites());
		}
		copy.setSource(this.getSource());
		copy.setStartDate(this.getStartDate());
		copy.setSync(this.isSync());
		copy.setUserId(this.getUserId());
		copy.setVersion(this.getVersion());
		return copy;
	}



	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();

		sb.append("dateCreated: " + this.getDateCreated() + ", ");
		sb.append("dateCreatedFromSource: " + this.getDateCreatedFromSource() + ", ");
		sb.append("dateUpdated: " + this.getDateUpdated() + ", ");
		sb.append("dateUpdatedFromSource: " + this.getDateUpdatedFromSource() + ", ");
		sb.append("deleted: " + this.isDeleted() + ", ");
		sb.append("endDate: " + this.getEndDate() + ", ");
		sb.append("exportdirective: " + this.getExportdirective() + ", ");
		sb.append("exportperiodtype: " + this.getExportperiodtype() + ", ");
		sb.append("exportDate: " + this.getExportDate() + ", ");
		sb.append("exportId: " + this.getExportId() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("parentId: " + this.getParentId() + ", ");
		sb.append("projectGroupCode: " + this.getProjectGroupCode() + ", ");
		sb.append("startDate: " + this.getStartDate() + ", ");
		sb.append("sync: " + this.isSync() + ", ");
		sb.append("userId: " + this.getUserId() + ", ");
		sb.append("version: " + this.getVersion() + ", ");
		return sb.toString();
	}


	/** Equals implementation.
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;

		if ( this == aThat ) {
			 return true;
		}


		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation();
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}

		final Export that;
		try {
			that = (Export) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}


		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getDateCreated() == null) && (that.getDateCreated() == null)) || (getDateCreated() != null && getDateCreated().equals(that.getDateCreated())));
		result = result && (((getDateCreatedFromSource() == null) && (that.getDateCreatedFromSource() == null)) || (getDateCreatedFromSource() != null && getDateCreatedFromSource().equals(that.getDateCreatedFromSource())));
		result = result && (((getDateUpdated() == null) && (that.getDateUpdated() == null)) || (getDateUpdated() != null && getDateUpdated().equals(that.getDateUpdated())));
		result = result && (((getDateUpdatedFromSource() == null) && (that.getDateUpdatedFromSource() == null)) || (getDateUpdatedFromSource() != null && getDateUpdatedFromSource().equals(that.getDateUpdatedFromSource())));
		result = result && (((getEndDate() == null) && (that.getEndDate() == null)) || (getEndDate() != null && getEndDate().equals(that.getEndDate())));
		result = result && (((getExportdirective() == null) && (that.getExportdirective() == null)) || (getExportdirective() != null && getExportdirective().equals(that.getExportdirective())));
		result = result && (((getExportperiodtype() == null) && (that.getExportperiodtype() == null)) || (getExportperiodtype() != null && getExportperiodtype().equals(that.getExportperiodtype())));
		result = result && (((getExportDate() == null) && (that.getExportDate() == null)) || (getExportDate() != null && getExportDate().equals(that.getExportDate())));
		result = result && (((getExportId() == null) && (that.getExportId() == null)) || (getExportId() != null && getExportId().equals(that.getExportId())));
		result = result && (((getParentId() == null) && (that.getParentId() == null)) || (getParentId() != null && getParentId().equals(that.getParentId())));
		result = result && (((getProjectGroupCode() == null) && (that.getProjectGroupCode() == null)) || (getProjectGroupCode() != null && getProjectGroupCode().equals(that.getProjectGroupCode())));
		result = result && (((getSource() == null) && (that.getSource() == null)) || (getSource() != null && getSource().getId().equals(that.getSource().getId())));
		result = result && (((getStartDate() == null) && (that.getStartDate() == null)) || (getStartDate() != null && getStartDate().equals(that.getStartDate())));
		result = result && (((getUserId() == null) && (that.getUserId() == null)) || (getUserId() != null && getUserId().equals(that.getUserId())));
		result = result && (((getVersion() == null) && (that.getVersion() == null)) || (getVersion() != null && getVersion().equals(that.getVersion())));
		return result;
	}
}
