package com.servinglynk.hmis.warehouse.service.impl; 

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.springframework.transaction.annotation.Transactional;

import com.servinglynk.hmis.warehouse.SortedPagination;
import com.servinglynk.hmis.warehouse.core.model.CommercialSexualExploitation;
import com.servinglynk.hmis.warehouse.core.model.CommercialSexualExploitations;
import com.servinglynk.hmis.warehouse.service.CommercialSexualExploitationService;
import com.servinglynk.hmis.warehouse.service.converter.CommercialSexualExploitationConverter;
import com.servinglynk.hmis.warehouse.service.exception.CommercialSexualExploitationNotFoundException;
import com.servinglynk.hmis.warehouse.service.exception.EnrollmentNotFound;


public class CommercialSexualExploitationServiceImpl extends ServiceBase implements CommercialSexualExploitationService  {

   @Transactional
   public CommercialSexualExploitation createCommercialSexualExploitation(CommercialSexualExploitation commercialSexualExploitation,UUID enrollmentId,String caller){
       com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation pCommercialSexualExploitation = CommercialSexualExploitationConverter.modelToEntity(commercialSexualExploitation, null);
       com.servinglynk.hmis.warehouse.model.v2014.Enrollment pEnrollment = daoFactory.getEnrollmentDao().getEnrollmentById(enrollmentId); 
       if(pEnrollment == null) throw new EnrollmentNotFound(); 
       pCommercialSexualExploitation.setEnrollmentid(pEnrollment); 
       pCommercialSexualExploitation.setDateCreated(LocalDateTime.now());
  //     pCommercialSexualExploitation.setUser(daoFactory.getHmisUserDao().findByUsername());
       daoFactory.getProjectDao().populateUserProjectGroupCode(pCommercialSexualExploitation,caller);
       daoFactory.getCommercialsexualexploitationDao().createCommercialSexualExploitation(pCommercialSexualExploitation);
       commercialSexualExploitation.setCommercialsexualexploitationId(pCommercialSexualExploitation.getId());
       return commercialSexualExploitation;
   }


   @Transactional
   public CommercialSexualExploitation updateCommercialSexualExploitation(CommercialSexualExploitation commercialSexualExploitation,UUID enrollmentId,String caller){
       com.servinglynk.hmis.warehouse.model.v2014.Enrollment pEnrollment = daoFactory.getEnrollmentDao().getEnrollmentById(enrollmentId); 
       if(pEnrollment == null) throw new EnrollmentNotFound(); 
       com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation pCommercialSexualExploitation = daoFactory.getCommercialsexualexploitationDao().getCommercialSexualExploitationById(commercialSexualExploitation.getCommercialsexualexploitationId());
       if(pCommercialSexualExploitation==null) throw new CommercialSexualExploitationNotFoundException();

       CommercialSexualExploitationConverter.modelToEntity(commercialSexualExploitation, pCommercialSexualExploitation);
       pCommercialSexualExploitation.setEnrollmentid(pEnrollment); 
       pCommercialSexualExploitation.setDateUpdated(LocalDateTime.now());
 //      pCommercialSexualExploitation.setUser(daoFactory.getHmisUserDao().findByUsername(caller));
       daoFactory.getCommercialsexualexploitationDao().updateCommercialSexualExploitation(pCommercialSexualExploitation);
       commercialSexualExploitation.setCommercialsexualexploitationId(pCommercialSexualExploitation.getId());
       return commercialSexualExploitation;
   }


   @Transactional
   public CommercialSexualExploitation deleteCommercialSexualExploitation(UUID commercialSexualExploitationId,String caller){
       com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation pCommercialSexualExploitation = daoFactory.getCommercialsexualexploitationDao().getCommercialSexualExploitationById(commercialSexualExploitationId);
       if(pCommercialSexualExploitation==null) throw new CommercialSexualExploitationNotFoundException();

       daoFactory.getCommercialsexualexploitationDao().deleteCommercialSexualExploitation(pCommercialSexualExploitation);
       return new CommercialSexualExploitation();
   }


   @Transactional
   public CommercialSexualExploitation getCommercialSexualExploitationById(UUID commercialSexualExploitationId){
       com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation pCommercialSexualExploitation = daoFactory.getCommercialsexualexploitationDao().getCommercialSexualExploitationById(commercialSexualExploitationId);
       if(pCommercialSexualExploitation==null) throw new CommercialSexualExploitationNotFoundException();

       return CommercialSexualExploitationConverter.entityToModel( pCommercialSexualExploitation );
   }


   @Transactional
   public CommercialSexualExploitations getAllEnrollmentCommercialSexualExploitations(UUID enrollmentId,Integer startIndex, Integer maxItems){
       CommercialSexualExploitations commercialSexualExploitations = new CommercialSexualExploitations();
        List<com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation> entities = daoFactory.getCommercialsexualexploitationDao().getAllEnrollmentCommercialSexualExploitations(enrollmentId,startIndex,maxItems);
        for(com.servinglynk.hmis.warehouse.model.v2014.Commercialsexualexploitation entity : entities){
           commercialSexualExploitations.addCommercialSexualExploitation(CommercialSexualExploitationConverter.entityToModel(entity));
        }
        long count = daoFactory.getCommercialsexualexploitationDao().getEnrollmentCommercialSexualExploitationsCount(enrollmentId);
        SortedPagination pagination = new SortedPagination();
 
        pagination.setFrom(startIndex);
        pagination.setReturned(commercialSexualExploitations.getCommercialSexualExploitations().size());
        pagination.setTotal((int)count);
        commercialSexualExploitations.setPagination(pagination);
        return commercialSexualExploitations; 
   }


}
